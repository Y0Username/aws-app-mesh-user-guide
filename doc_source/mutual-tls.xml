<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "file://zonbook/docbookx.dtd"
[
    <!ENTITY % xinclude SYSTEM "file://AWSShared/common/xinclude.mod">
    %xinclude;
    <!ENTITY % phrases-shared SYSTEM "file://AWSShared/common/phrases-shared.ent">
    %phrases-shared;
    <!ENTITY % phrases-appmesh SYSTEM "../shared/phrases-app-mesh.ent"> 
    %phrases-appmesh;
]>

<section role="topic" id="mutual-tls">
    <info>
        <title id="mutual-tls.title">Mutual TLS
            Authentication</title>
    </info>
    <para>Mutual TLS (Transport Layer Security) authentication is an optional component of TLS that
        offers two-way peer authentication. Mutual TLS authentication adds a layer of security over
        TLS and allows your services to verify the client that's making the connection.</para>
    <para>The client in the client-server relationship also provides an X.509 certificate during the
        session negotiation process. The server uses this certificate to identify and authenticate
        the client. This process helps to verify if the certificate is issued by a trusted
        certificate authority (CA) and if the certificate is a valid certificate. It also uses the
        Subject Alternative Name (SAN) on the certificate to identify the client. </para>
    <para>You can enable mutual TLS authentication for all the protocols supported by &MESHlong;.
        They are TCP, HTTP/1.1, HTTP/2, gRPC.</para>
    <note>
        <para>Using &MESH;, you can configure mutual TLS authentication for communications between
            Envoy proxies from your services. However, communications between your applications and
            Envoy proxies are unencrypted.</para>
    </note>
    <section id="mtls-certificates">
        <info>
            <title id="mtls-certificates.title">Mutual TLS authentication certificates</title>
        </info>
        <para>&MESHlong; supports two possible certificate sources for mutual TLS authentication.
            Client certificates in a TLS Client Policy and server validation in a listener TLS
            configuration can be sourced from:</para>
        <itemizedlist>
            <listitem>
                <para><emphasis role="bold">File System&endash;</emphasis> Certificates from the
                    local file system of the Envoy proxy that's being run. To distribute
                    certificates to Envoy, you need to provide file paths for the certificate chain
                    and private key to the &MESH; API.</para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">Envoyâ€™s Secret Discovery Service
                        (SDS)&endash;</emphasis> Bring-your-own sidecars that implement SDS and
                    allow certificates to be sent to Envoy. They include the SPIFFE Runtime
                    Environment (SPIRE). </para>
            </listitem>
        </itemizedlist>
        <important>
            <para>&MESH; doesn't store the certificates or private keys that are used for mutual TLS
                authentication. Instead, Envoy stores them in memory.</para>
        </important>
    </section>
    <section id="mtls-configure-mesh-endpoints">
        <info>
            <title id="mtls-configure-mesh-endpoints.title">Configure mesh endpoints</title>
        </info>
        <para>Configure mutual TLS authentication for your mesh endpoints, such as virtual nodes or
            gateways. These endpoints provide certificates and specify trusted authorities.</para>
        <para>To do this, you need to provision X.509 certificates for both the client and the
            server, and explicitly define trusted authority certificates in the validation context
            of both the TLS termination and TLS origination.</para>
        <variablelist role="termdef">
            <varlistentry>
                <term>Trust inside of a mesh</term>
                <listitem>
                    <para>Server-side certificates are configured in Virtual Node listeners (TLS
                        termination), and client-side certificates are configured in Virtual Nodes
                        service backends (TLS origination). As an alternative to this configuration,
                        you can define a default client policy for all services backends of a
                        virtual node, and then, if required, you can override this policy for
                        specific backends as needed. Virtual Gateways can only be configured with a
                        default client policy that applies to all of its backends.</para>
                    <para>You can configure trust across different meshes by enabling mutual TLS
                        authentication for inbound traffic on the Virtual Gateways for both
                        meshes.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Trust outside of a mesh</term>
                <listitem>
                    <para>Specify server-side certificates in the Virtual Gateway listener for TLS
                        termination. Configure the external service that communicates with your
                        Virtual Gateway to present client-side certificates. The certificates should
                        be derived from one of the same certificate authorities (CAs) that the
                        server-side certificates use on the Virtual Gateway listener for TLS
                        origination.</para>
                </listitem>
            </varlistentry>
        </variablelist>
    </section>
    <section id="mtls-migrating-services">
        <info>
            <title id="mtls-migrating-services.title">Migrate services to mutual TLS
                authentication</title>
        </info>
        <para>Follow these guidelines to maintain connectivity when migrating your existing services
            within &MESH; to mutual TLS authentication.</para>
        <procedure>
            <title>Migrating services communicating over plaintext</title>
            <step>
                <para>Enable <code>PERMISSIVE</code> mode for the TLS configuration on the server
                    endpoint. This mode allows plain-text traffic to connect to the endpoint.</para>
            </step>
            <step>
                <para>Configure mutual TLS authentication on your server, specifying the server
                    certificate, trust chain, and optionally the trusted SANs.</para>
            </step>
            <step>
                <para>Confirm communication is happening over a TLS connection.</para>
            </step>
            <step>
                <para>Configure mutual TLS authentication on your clients, specifying the client
                    certificate, trust chain, and optionally the trusted SANs.</para>
            </step>
            <step>
                <para>Enable <code>STRICT</code> mode for the TLS configuration on the
                    server.</para>
            </step>
        </procedure>
        <procedure>
            <title>Migrating services communicating over TLS</title>
            <step>
                <para>Configure the mutual TLS settings on your clients, specifying the client
                    certificate and optionally the trusted SANs. The client certificate isn't sent
                    to its backend until after the backend server requests it.</para>
            </step>
            <step>
                <para>Configure the mutual TLS settings on your server, specifying the trust chain
                    and optionally the trusted SANs. For this, your server requests a client
                    certificate.</para>
            </step>
        </procedure>
    </section>
    <section id="mtls-verification">
        <info>
            <title id="mtls-verification.title">Verifying mutual TLS authentication</title>
        </info>
        <para>You can refer to the <ulink
                url="https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#verify-encryption"
                >Transport Layer Security: Verify encryption</ulink> documentation to see how
            exactly Envoy emits TLS-related statistics. For mutual TLS authentication, you should
            inspect the following statistics:</para>
        <itemizedlist>
            <listitem>
                <para><code>ssl.handshake</code></para>
            </listitem>
            <listitem>
                <para><code>ssl.no_certificate</code></para>
            </listitem>
            <listitem>
                <para><code>ssl.fail_verify_no_cert</code></para>
            </listitem>
            <listitem>
                <para><code>ssl.fail_verify_san</code></para>
            </listitem>
        </itemizedlist>
        <para>The two following examples of statistics together show that successful TLS connections
            terminating to the virtual node all originated from a client that provided a
            certificate.</para>
        <programlisting>listener.0.0.0.0_15000.ssl.handshake: 3</programlisting>
        <programlisting>listener.0.0.0.0_15000.ssl.no_certificate: 0</programlisting>
        <para>The next example of a statistic shows that the connections from a virtual client node
            (or gateway) to a backend virtual node failed. The Subject Alternative Name (SAN) that's
            presented in the server certificate doesn't match any of the SANs trusted by the
            client.</para>
        <programlisting>cluster.cds_egress_my-mesh_my-backend-node_http_9080.ssl.fail_verify_san: 5</programlisting>
    </section>
    <section id="mtls-walkthrough">
        <info>
            <title id="mtls-walkthrough.title">&MESH; mutual TLS authentication walkthroughs</title>
        </info>
        <itemizedlist>
            <listitem>
                <para>
                    <ulink
                        url="https://github.com/aws/aws-app-mesh-examples/tree/master/walkthroughs/howto-mutual-tls-file-provided"
                        >Mutual TLS authentication walkthrough</ulink>: This walkthrough describes
                    how you can use the &MESH; CLI to build a color app with mutual TLS
                    authentication. </para>
            </listitem>
            <listitem>
                <para>
                    <ulink
                        url="https://github.com/aws/aws-app-mesh-examples/tree/master/walkthroughs/howto-k8s-mtls-sds-based"
                        >&EKS; mutual TLS SDS-based walkthrough</ulink>: This walkthrough shows how you can
                    use mutual TLS SDS-based authentication with &EKS; and SPIFFE Runtime Environment (SPIRE).
                </para>
            </listitem>
            <listitem>
                <para>
                    <ulink
                        url="https://github.com/aws/aws-app-mesh-examples/tree/master/walkthroughs/howto-k8s-mtls-file-based"
                        >&EKS; mutual TLS file-based walkthrough</ulink>: This walkthrough shows how you can
                    use mutual TLS file-based authentication with &EKS; and SPIFFE Runtime Environment (SPIRE).
                </para>
            </listitem>
        </itemizedlist>
    </section>
</section>

