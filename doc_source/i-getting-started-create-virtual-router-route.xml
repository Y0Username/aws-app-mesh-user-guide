<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "file://zonbook/docbookx.dtd"
[
  <!ENTITY % xinclude SYSTEM "file://AWSShared/common/xinclude.mod">
  %xinclude;
  <!ENTITY % phrases-shared SYSTEM "file://AWSShared/common/phrases-shared.ent">
  %phrases-shared;
<!ENTITY % phrases-appmesh SYSTEM "../shared/phrases-app-mesh.ent"> 
    %phrases-appmesh;
]>

<section id="create-virtual-router-and-route">
    <info>
        <title id="create-virtual-router-and-route.title">Step 3: Create a virtual router and
            route</title>
    </info>
    <para>Virtual routers route traffic for one or more virtual services within your mesh. For more
        information, see <xref linkend="virtual_routers" endterm="virtual_routers.title"/>  and <xref linkend="routes" endterm="routes.title"/>.</para>
    <para>Create the following resources:</para>
    <itemizedlist>
        <listitem>
            <para>A virtual router named <code>serviceB</code>, since the
                <code>serviceB.apps.local</code> virtual service does not initiate outbound
                communication with any other service. Remember that the virtual service that you
                created previously is an abstraction of your actual
                <code>serviceb.apps.local</code> service. The virtual service sends traffic
                to the virtual router. The virtual router will listen for traffic using the
                HTTP/2 protocol on port 80. Other protocols are also supported. </para>
        </listitem>
        <listitem>
            <para>A route named <code>serviceB</code>. It will route 100 percent of its traffic
                to the <code>serviceB</code> virtual node. You will change the weight in a later
                step once you have added the <code>serviceBv2</code> virtual node. Though not
                covered in this guide, you can add additional filter criteria for the route and
                add a retry policy to cause the Envoy proxy to make multiple attempts to send
                traffic to a virtual node when it experiences a communication problem.</para>
        </listitem>
    </itemizedlist>
    <tablist>
        <tablistentry>
            <tabname>&console;</tabname>
            <tabcontent>
                <procedure>
                    <step>
                        <para>For <guilabel>Virtual router name,</guilabel> enter
                            <userinput>serviceB</userinput>.</para>
                    </step>
                    <step>
                        <para>Under <guilabel>Listener configuration</guilabel>, choose
                            <guilabel>http2</guilabel> for <guilabel>Protocol</guilabel> and
                            specify <userinput>80</userinput> for
                            <guilabel>Port</guilabel>.</para>
                    </step>
                    <step>
                        <para>For <guilabel>Route name</guilabel>, enter
                            <userinput>serviceB</userinput>. </para>
                    </step>
                    <step>
                        <para>For <guilabel>Route type</guilabel>, choose
                            <guilabel>http2</guilabel>.</para>
                    </step>
                    <step>
                        <para>For <guilabel>Virtual node name</guilabel> under <guilabel>Route
                            configuration</guilabel>, select <code>serviceB</code> and enter
                            <userinput>100</userinput> for
                            <guilabel>Weight</guilabel>.</para>
                    </step>
                    <step>
                        <para>To continue, choose <guilabel>Next</guilabel>.</para>
                    </step>
                </procedure>
            </tabcontent>
        </tablistentry>
        <tablistentry>
            <tabname>&CLI;</tabname>
            <tabcontent>
                <procedure>
                    <step>
                        <para>Create a virtual router.</para>
                        <substeps>
                            <step>
                                <para>Create a file named
                                    <code>create-virtual-router.json</code> with the
                                    following contents:</para>
                                <programlisting language="json">{
    "meshName": "apps",
    "spec": {
        "listeners": [
            {
                "portMapping": {
                    "port": 80,
                    "protocol": "http2"
                }
            }
        ]
    },
    "virtualRouterName": "serviceB"
}</programlisting>
                            </step>
                            <step>
                                <para>Create the virtual router with the <ulink
                                    type="documentation"
                                    url="cli/latest/reference/appmesh/create-virtual-router.html"
                                    >create-virtual-router</ulink> command using the JSON
                                    file as input.</para>
                                <programlisting><userinput>aws appmesh create-virtual-router --cli-input-json file://create-virtual-router.json</userinput></programlisting>
                            </step>
                        </substeps>
                    </step>
                    <step>
                        <para>Create a route.</para>
                        <substeps>
                            <step>
                                <para>Create a file named <code>create-route.json</code> with
                                    the following contents:</para>
                                <programlisting language="json">{
    "meshName" : "apps",
    "routeName" : "serviceB",
    "spec" : {
        "httpRoute" : {
            "action" : {
                "weightedTargets" : [
                    {
                        "virtualNode" : "serviceB",
                        "weight" : 100
                    }
                ]
            },
            "match" : {
                "prefix" : "/"
            }
        }
    },
    "virtualRouterName" : "serviceB"
}</programlisting>
                            </step>
                            <step>
                                <para>Create the route with the <ulink type="documentation"
                                    url="cli/latest/reference/appmesh/create-route.html"
                                    >create-route</ulink> command using the JSON file as
                                    input.</para>
                                <programlisting><userinput>aws appmesh create-route --cli-input-json file://create-route.json</userinput></programlisting>
                            </step>
                        </substeps>
                    </step>
                </procedure>
            </tabcontent>
        </tablistentry>
    </tablist>
</section>