<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "file://zonbook/docbookx.dtd"[
    <!ENTITY % xinclude SYSTEM "file://AWSShared/common/xinclude.mod">
    %xinclude;
    <!ENTITY % phrases-shared SYSTEM "file://AWSShared/common/phrases-shared.ent">
    %phrases-shared;
    <!ENTITY % phrases-appmesh SYSTEM "../shared/phrases-app-mesh.ent"> 
    %phrases-appmesh;
]>
<section role="topic" id="getting-started-ecs">
    <info>
        <title id="getting-started-ecs.title">Getting started with &MESHlong; and &ECS;</title>
        <titleabbrev>&MESH; and &ECS;</titleabbrev>
    </info>

    <para>This topic helps you use &MESHlong; with an actual service that is running on &ECS;. This
        tutorial covers basic features of several &MESH; resource types.</para>

    <xi:include href="i-getting-started-scenario.xml"/>
    <section id="prerequisites">
        <info>
            <title id="prerequisites.title">Prerequisites</title>
        </info>
        <itemizedlist>
            <listitem>
                <para>An existing understanding of &MESH; concepts. For more information, see <xref
                        linkend="what-is-app-mesh"/>.</para>
            </listitem>
            <listitem>
                <para>An existing understanding of &ECS;s concepts. For more information, see <ulink
                        type="documentation" url="AmazonECS/latest/developerguide/Welcome.html">What
                        is &ECS;</ulink> in the &guide-ecs-dev;.</para>
            </listitem>

            <listitem>
                <para>&MESH; supports Linux services that are registered with DNS, &CMAP;, or both.
                    To use this getting started guide, we recommend that you have three existing
                    services that are registered with DNS. The procedures in this topic assume that
                    the existing services are named <code>serviceA</code>, <code>serviceB</code>,
                    and <code>serviceBv2</code> and that all services are discoverable through a
                    namespace named <code>apps.local</code>. </para>
                <para>You can create a service mesh and its resources even if the services
                    don&apos;t exist, but you cannot use the mesh until you have deployed actual
                    services. For more information about service discovery on &ECS;, see <ulink
                        url="&url-ecs-dev;service-discovery.html">Service Discovery</ulink>. To
                    create an &ECS; service with service discovery, see <ulink
                        url="&url-ecs-dev;create-service-discovery.html">Tutorial: Creating a
                        Service Using Service Discovery</ulink>. If you don&apos;t already have
                    services running, you can <ulink
                        url="&url-ecs-dev;create-service-discovery.html">Create an &ECS; service
                        with service discovery</ulink>.</para>
            </listitem>
        </itemizedlist>
    </section>
    <xi:include href="i-getting-started-create-mesh-virtual-service2.xml"/>
    <xi:include href="i-getting-started-create-virtual-node2.xml"/>
    <xi:include href="i-getting-started-create-virtual-router-route.xml"/>
    <xi:include href="i-getting-started-review-create.xml"/>
    <xi:include href="i-getting-started-create-additional-resources.xml"/>
    <section id="update-services">
        <info>
            <title id="update-services.title">Step 6: Update services</title>
        </info>
        <para>After creating your mesh, you need to complete the following tasks:</para>
        <itemizedlist>
            <listitem>
                <para>Authorize the Envoy proxy that you deploy with each &ECS; task to read the
                    configuration of one or more virtual nodes. For more information about how to
                    authorize the proxy, see <ulink url="&url-mesh-user;proxy-authorization.html"
                        >Proxy authorization</ulink>.</para>
            </listitem>
            <listitem>
                <para>Update each of your existing &ECS; task definitions to use the Envoy
                    proxy.</para>
            </listitem>
        </itemizedlist>
        <formalpara>
            <title>Credentials</title>
            <para>The Envoy container requires &IAMlong; credentials for signing requests that are
                sent to the &MESH; service. For &ECS; tasks deployed with the &EC2; launch type, the
                credentials can come from the <ulink url="&url-ecs-dev;instance_IAM_role.html"
                    >instance role</ulink> or from a <ulink url="&url-ecs-dev;task-iam-roles.html"
                    >task IAM role</ulink>. &ECS; tasks deployed with the Fargate launch type
                don&apos;t have access to the &EC2; metadata server that supplies instance &IAM;
                profile credentials. To supply the credentials, you must attach an &IAM; task role
                to any tasks deployed with the Fargate launch type. </para>
        </formalpara>
        <para>If a task is deployed with the &EC2; launch type and access is blocked to the &EC2;
            metadata server, as described in the <emphasis role="italic">Important</emphasis>
            annotation in <ulink url="&url-ecs-dev;task-iam-roles.html">IAM Role for Tasks</ulink>,
            then a task &IAM; role must also be attached to the task. The role that you assign to
            the instance or task must have an &IAM; policy attached to it as described in <ulink
                url="&url-mesh-user;proxy-authorization.html">Proxy authorization</ulink>.</para>

        <procedure>
            <title>To update your task definitions using the &console;</title>
            <para>The following steps only show updating the <code>taskB</code> task for the
                scenario. You also need to update the <code>taskBv2</code> and <code>taskA</code>
                tasks by changing the values appropriately.</para>
            <step>&ECSConsole_switch;</step>
            <step>
                <para>From the navigation bar, choose the Region that contains your task
                    definition.</para>
            </step>
            <step>
                <para>In the navigation pane, choose <guilabel>Task Definitions</guilabel>.</para>
            </step>
            <step>
                <para>On the <guilabel>Task Definitions</guilabel> page, select the box to the left
                    of the task definition to revise. From the pre-requisites and previous steps,
                    you might have task definitions named <code>taskA</code>, <code>taskB</code>,
                    and <code>taskBv2</code>. Select <code>taskB</code> and choose <guilabel>Create
                        new revision</guilabel>.</para>
            </step>
            <step>
                <para>On the <guilabel>Create new revision of Task Definition</guilabel> page, make
                    the following changes to enable &MESH; integration.</para>
                <substeps>
                    <step>
                        <para>For <guilabel>Service Integration</guilabel>, to configure the
                            parameters for &MESH; integration choose <guilabel>Enable &MESH;
                                integration</guilabel> and then do the following:</para>
                        <substeps>
                            <step>
                                <para>For <guilabel>Application container name</guilabel>, choose
                                    the container name to use for the &MESH; application. This
                                    container must already be defined within the task
                                    definition.</para>
                            </step>
                            <step>
                                <para>For <guilabel>Envoy image</guilabel>, complete the following
                                    task and enter the value that is returned.</para>
                                &envoy-image-availability; &envoy-min-supported-version-note;</step>
                            <step>
                                <para>For <guilabel>Mesh name</guilabel>, choose the &MESH; service
                                    mesh to use. In this topic, the name of the mesh that was
                                    created is <code>apps.</code></para>
                            </step>
                            <step>
                                <para>For <guilabel>Virtual node name</guilabel>, choose the App
                                    Mesh virtual node to use. For example, for the
                                        <code>taskB</code> task, you would choose the
                                        <code>serviceB</code> virtual node that you created in a
                                    previous step.</para>
                            </step>
                            <step>
                                <para>The value for <guilabel>Virtual node port</guilabel> is
                                    pre-populated with the listener port that you specified when you
                                    created the virtual node.</para>
                            </step>
                            <step>
                                <para>Choose <guilabel>Apply</guilabel>, and then choose
                                        <guilabel>Confirm</guilabel>. A new Envoy proxy container is
                                    created and added to the task definition, and the settings to
                                    support the container are also created. The Envoy proxy
                                    container then pre-populates the &MESH; <guilabel>Proxy
                                        Configuration</guilabel> settings for the next step.</para>
                            </step>
                        </substeps>
                    </step>
                    <step>
                        <para>For <guilabel>Proxy Configuration</guilabel>, verify all of the
                            pre-populated values.</para>
                    </step>
                    <step>
                        <para>For <guilabel>Network Mode</guilabel>, make sure that
                                <code>awsvpc</code> is selected. To learn more about the
                                <code>awsvpc</code> network mode, see <ulink
                                url="&url-ecs-dev;task-networking.html">Task Networking with the
                                    <code>awsvpc</code> Network Mode</ulink>.</para>
                    </step>
                </substeps>
            </step>
            <step>
                <para>Choose <guilabel>Create</guilabel>.</para>
            </step>
            <step>
                <para>Update your service with the updated task definition. For more information,
                    see <ulink url="&url-ecs-dev;update-service.html">Updating a
                    service</ulink>.</para>
            </step>
        </procedure>
        <para>The console creates the task definition's json specification. You can modify some of
            the settings, but not others. for more information, expand the following section.</para>
        <collapsible expand-section="_collapse_all_">
            <section id="getting-started-ecs-json">
                <info>
                    <title id="getting-started-ecs-json.title">Task definition json</title>
                </info>

                <formalpara>
                    <title>Proxy configuration</title>
                    <para>To configure your &ECS; service to use &MESH;, your service&apos;s task
                        definition must have the following proxy configuration section. Set the
                        proxy configuration <code>type</code> to <code>APPMESH</code> and the
                            <code>containerName</code> to <code>envoy</code>. Set the following
                        property values accordingly.</para>
                </formalpara>
                <variablelist>
                    <varlistentry>
                        <term><code>IgnoredUID</code></term>
                        <listitem>
                            <para>The Envoy proxy doesn&apos;t route traffic from processes that use
                                this user ID. You can choose any user ID that you want for this
                                property value, but this ID must be the same as the
                                    <code>user</code> ID for the Envoy container in your task
                                definition. This matching allows Envoy to ignore its own traffic
                                without using the proxy. Our examples use
                                        <code><replaceable>1337</replaceable></code> for historical
                                purposes.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><code>ProxyIngressPort</code></term>
                        <listitem>
                            <para>This is the inbound port for the Envoy proxy container. Set this
                                value to <code>15000</code>.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><code>ProxyEgressPort</code></term>
                        <listitem>
                            <para>This is the outbound port for the Envoy proxy container. Set this
                                value to <code>15001</code>.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><code>AppPorts</code></term>
                        <listitem>
                            <para>Specify any inbound ports that your application containers listen
                                on. In this example, the application container listens on port
                                        <code><replaceable>9080</replaceable></code>. The port that
                                you specify must match the port configured on the virtual node
                                listener.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><code>EgressIgnoredIPs</code></term>
                        <listitem>
                            <para>Envoy doesn&apos;t proxy traffic to these IP addresses. Set this
                                value to <code>169.254.170.2,169.254.169.254</code>, which ignores
                                the &EC2; metadata server and the &ECS; task metadata endpoint. The
                                metadata endpoint provides &IAM; roles for tasks credentials. You
                                can add additional addresses.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><code>EgressIgnoredPorts</code></term>
                        <listitem>
                            <para>You can add a comma separated list of ports. Envoy doesn&apos;t
                                proxy traffic to these ports. Even if you list no ports, port 22 is
                                ignored.</para>
                            <note>
                                <para>The maximum number of outbound ports that can be ignored is
                                    15.</para>
                            </note>
                        </listitem>
                    </varlistentry>
                </variablelist>
                <programlisting language="JSON">"proxyConfiguration": {
	"type": "APPMESH",
	"containerName": "envoy",
	"properties": [{
			"name": "IgnoredUID",
			"value": "<replaceable>1337</replaceable>"
		},
		{
			"name": "ProxyIngressPort",
			"value": "15000"
		},
		{
			"name": "ProxyEgressPort",
			"value": "15001"
		},
		{
			"name": "AppPorts",
			"value": "<replaceable>9080</replaceable>"
		},
		{
			"name": "EgressIgnoredIPs",
			"value": "169.254.170.2,169.254.169.254"
		},
		{
			"name": "EgressIgnoredPorts",
			"value": "<replaceable>22</replaceable>"
		}
	]
}</programlisting>

                <formalpara>
                    <title>Application container Envoy dependency</title>
                    <para>The application containers in your task definitions must wait for the
                        Envoy proxy to bootstrap and start before they can start. Tomake sure this
                        happens, you set a <code>dependsOn</code> section in each application
                        container definition to wait for the Envoy container to report as
                            <code>HEALTHY</code>. The following code shows an application container
                        definition example with this dependency. All of the properties in the
                        following example are required. Some of the property values are also
                        required, but some are <replaceable>replaceable</replaceable>.</para>
                </formalpara>
                <programlisting language="JSON">{
	"name": "<replaceable>appName</replaceable>",
	"image": "<replaceable>appImage</replaceable>",
	"portMappings": [{
		"containerPort": <replaceable>9080</replaceable>,
		"hostPort": <replaceable>9080</replaceable>,
		"protocol": "tcp"
	}],
	"essential": true,
	"dependsOn": [{
		"containerName": "envoy",
		"condition": "HEALTHY"
	}]
}</programlisting>

                <para><emphasis role="bold">Envoy container definition</emphasis></para>
                <para>Your &ECS; task definitions must contain an &MESH; Envoy container
                    image.</para> &envoy-image-availability; &envoy-min-supported-version-note;
                &custom-envoy-image; <para>All of the properties in the following example are
                    required. Some of the property values are also required, but some are
                        <replaceable>replaceable</replaceable>.</para>
                <note>
                    <itemizedlist>
                        <listitem>
                            <para>The Envoy container definition must be marked as
                                    <code>essential</code>.</para>
                        </listitem>
                        <listitem>
                            <para>We recommend allocating <code>512</code> CPU units and at least
                                    <code>64</code> MiB of memory to the Envoy container. On Fargate
                                the lowest you will be able to set is <code>1024</code> MiB of
                                memory.</para>
                        </listitem>
                        <listitem>
                            <para>The virtual node name for the &ECS; service must be set to the
                                value of the <code>APPMESH_RESOURCE_ARN</code> property. This
                                property requires version <code>1.15.0</code> or later of the Envoy
                                image. For more information, see <xref linkend="envoy"/>.</para>
                        </listitem>
                        <listitem>
                            <para>The value for the <code>user</code> setting must match the
                                    <code>IgnoredUID</code> value from the task definition proxy
                                configuration. In this example, we use
                                        <code><replaceable>1337</replaceable></code>. </para>
                        </listitem>

                        <listitem>
                            <para>The health check shown here waits for the Envoy container to
                                bootstrap properly before reporting to &ECS; that the Envoy
                                container is healthy and ready for the application containers to
                                start. </para>
                        </listitem>
                        <listitem>
                            <para>By default, &MESH; uses the name of the resource you specified in
                                    <code>APPMESH_RESOURCE_ARN</code> when Envoy is referring to
                                itself in metrics and traces. You can override this behavior by
                                setting the <code>APPMESH_RESOURCE_CLUSTER</code> environment
                                variable with your own name. This property requires version
                                    <code>1.15.0</code> or later of the Envoy image. For more
                                information, see <xref linkend="envoy"/>.</para>
                        </listitem>
                    </itemizedlist>
                </note>
                <para>The following code shows an Envoy container definition example.</para>
                <programlisting language="JSON">{
	"name": "envoy",
	"image": "&envoy-image-replaceable-registry;",
	"essential": true,
	"environment": [{
		"name": "APPMESH_RESOURCE_ARN",
		"value": "arn:aws:appmesh:<replaceable>us-west-2</replaceable>:<replaceable>&ExampleAWSAccountNo1;</replaceable>:mesh/<replaceable>apps</replaceable>/virtualNode/<replaceable>serviceB</replaceable>"
	}],
	"healthCheck": {
		"command": [
			"CMD-SHELL",
			"curl -s http://localhost:9901/server_info | grep state | grep -q LIVE"
		],
		"startPeriod": <replaceable>10</replaceable>,
		"interval": <replaceable>5</replaceable>,
		"timeout": <replaceable>2</replaceable>,
		"retries": <replaceable>3</replaceable>
	},
	"user": "<replaceable>1337</replaceable>"
}</programlisting>

                <formalpara>
                    <title>Example task definitions</title>
                    <para>The following example &ECS; task definitions show how to merge the
                        examples from above into a task definition for <code>taskB</code>. Examples
                        are provided for creating tasks for both &ECS; launch types with or without
                        using &xraylong;. Change the <replaceable>replaceable</replaceable> values,
                        as appropriate, to create task definitions for the tasks named
                            <code>taskBv2</code> and <code>taskA</code> from the scenario.
                        Substitute your mesh name and virtual node name for the
                            <code>APPMESH_RESOURCE_ARN</code> value and a list of ports that your
                        application listens on for the proxy configuration <code>AppPorts</code>
                        value. By default, &MESH; uses the name of the resource you specified in
                            <code>APPMESH_RESOURCE_ARN</code> when Envoy is referring to itself in
                        metrics and traces. You can override this behavior by setting the
                            <code>APPMESH_RESOURCE_CLUSTER</code> environment variable with your own
                        name. All of the properties in the following examples are required. Some of
                        the property values are also required, but some are
                            <replaceable>replaceable</replaceable>.</para>
                </formalpara>


                <para>If you&apos;re running an &ECS; task as described in the Credentials section,
                    then you need to add an existing <ulink url="&url-ecs-dev;task-iam-roles.html"
                        >task &IAM; role</ulink>, to the examples.</para>
                <important>
                    <para>Fargate must use a port value greater than 1024.</para>
                </important>

                <xi:include href="i-ecs-task-example-fargate.xml"/>
                <xi:include href="i-ecs-task-example-fargate-xray.xml"/>
                <xi:include href="i-ecs-task-example-ec2.xml"/>
                <xi:include href="i-ecs-task-example-ec2-xray.xml"/>
            </section>
        </collapsible>
    </section>
</section>
