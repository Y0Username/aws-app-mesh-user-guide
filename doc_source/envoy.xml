<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "file://zonbook/docbookx.dtd"
[
    <!ENTITY % xinclude SYSTEM "file://AWSShared/common/xinclude.mod">
    %xinclude;
    <!ENTITY % phrases-shared SYSTEM "file://AWSShared/common/phrases-shared.ent">
    %phrases-shared;
   <!ENTITY % phrases-appmesh SYSTEM "../shared/phrases-app-mesh.ent"> 
    %phrases-appmesh;
]>
<chapter role="topic" id="envoy">
  <info>
    <title id="envoy.title">Envoy image</title>
    <titleabbrev>Envoy</titleabbrev>
  </info>
  <para>&MESHlong; is a service mesh based on the <ulink url="https://www.envoyproxy.io/"
      >Envoy</ulink> proxy.</para>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/proxy.png" format="PNG" width="100%" scalefit="1"
        contentdepth="100%"/>
    </imageobject>
  </mediaobject>
  <para>You must add an Envoy proxy to the &ECS; task, Kubernetes pod, or &EC2; instance represented
    by your &MESH; endpoint, such as a virtual node or virtual gateway. &MESH; vends an Envoy proxy
    Docker container image and validate that this container image is patched with the latest
    vulnerability and performance patches. &MESH; tests a new Envoy proxy release against the &MESH;
    feature set before making a new container image available to you.</para>
  <para>You can choose either a Regional image from the list below or an image from our <ulink
      url="https://gallery.ecr.aws/appmesh/aws-appmesh-envoy">public repository</ulink> named
      <code>aws-appmesh-envoy</code>.</para>
  <important>
    <itemizedlist>
      <listitem>
        <para>Version <code>1.17</code> is a significant update to Envoy. See <ulink
            url="https://docs.aws.amazon.com/app-mesh/latest/userguide/1.17-migration.html"
            >Updating/migrating to Envoy 1.17</ulink> for more details.</para>
      </listitem>
      <listitem>
        <para>The <code>1.17</code> release also opts customers into Envoy's latest <emphasis
            role="bold">xDS API</emphasis>. Due to possible behavioral differences, we recommend
          more gradually deploying it in your applications.</para>
      </listitem>
    </itemizedlist>
  </important> &envoy-image-availability; &envoy-min-supported-version-note; <note>
    <para>We recommend allocating 512 CPU units and at least 64 MiB of memory to the Envoy
      container. On Fargate the lowest you will be able to set is 1024 MiB of memory.</para>
  </note>
  <para>Access to this container image in &ECR; is controlled by &IAMlong;, so you must use &IAM; to
    verify that you have read access to &ECR;. For example, when using &ECS;, you can assign an
    appropriate task execution role to an &ECS; task. Further, if you use &IAM; policies that limit
    access to specific &ECR; resources, then you must verify that you allow access to the
    Region-specific Amazon Resource Name (ARN) that identifies the <code>aws-appmesh-envoy</code>
    repository. For example, in the <code>us-west-2</code> Region, you'd allow access to the
    following resource:
    <code>arn:aws:ecr:us-west-2:840364872350:repository/aws-appmesh-envoy</code>. For more
    information, see <ulink type="documentation"
      url="AmazonECR/latest/userguide/ecr_managed_policies.html">&ECR; Managed Policies</ulink>. If
    you're using Docker on an &EC2; instance, then you need to authenticate Docker to the
    repository. For more information, see <ulink type="documentation"
      url="AmazonECR/latest/userguide/Registries.html#registry_auth">Registry
    authentication</ulink>.</para>
  <para>We occasionally release new &MESH; features that depend on Envoy changes that have not been
    merged to the upstream Envoy images yet. To use these new &MESH; features before the Envoy
    changes are merged upstream, you must use the &MESH;-vended Envoy container image. For a list of
    changes, see the <ulink
      url="https://github.com/aws/aws-app-mesh-roadmap/labels/Envoy%20Upstream">&MESH; GitHub
      roadmap issues</ulink> with the <code>Envoy Upstream</code> label. Otherwise, while we
    recommend that you use the &MESH; Envoy container image as the best supported option, you may
    use your own Envoy image.</para>
  <section role="topic" id="envoy-config">
    <info>
      <title id="envoy-config.title">Envoy configuration variables</title>
    </info>
    <para>The following environment variables enable you to configure the Envoy containers for your
      &MESH; virtual node task groups.</para>
    <note>
      <para>Envoy 1.17 will no longer support Envoy’s <emphasis role="bold">v2 xDS</emphasis> API.
        If you are using <ulink
          url="https://docs.aws.amazon.com/app-mesh/latest/userguide/envoy-config.html">Envoy
          configuration variables</ulink> that accept Envoy config files, they must be updated to
        the latest<emphasis role="bold"> v3 xDS</emphasis> API.</para>
    </note>
    <section id="envoy-required-config">
      <info>
        <title id="envoy-required-config.title">Required variables</title>
      </info>
      <para>The following environment variable is required for all &MESH; Envoy containers. This
        variable can only be used with version <code>1.15.0</code> or later of the Envoy image. If
        you're using an earlier version of the image, then you must set the
          <code>APPMESH_VIRTUAL_NODE_NAME</code> variable instead.</para>
      <variablelist>
        <varlistentry>
          <term><code>APPMESH_RESOURCE_ARN</code></term>
          <listitem>
            <para> When you add the Envoy container to a task group, set this environment variable
              to the &ARN; of the virtual node or the virtual gateway that the task group
              represents. The following list contains example ARNs:</para>
            <itemizedlist>
              <listitem>
                <para><emphasis role="bold">Virtual node</emphasis> &endash;
                    arn:aws:appmesh:<replaceable>Region-code</replaceable>:<replaceable>&ExampleAWSAccountNo1;</replaceable>:mesh/<replaceable>meshName</replaceable>/virtualNode/<replaceable>virtualNodeName</replaceable></para>
              </listitem>
              <listitem>
                <para><emphasis role="bold">Virtual gateway</emphasis> &endash;
                    arn:aws:appmesh:<replaceable>Region-code</replaceable>:<replaceable>&ExampleAWSAccountNo1;</replaceable>:mesh/<replaceable>meshName</replaceable>/virtualGateway/<replaceable>virtualGatewayName</replaceable></para>
              </listitem>
            </itemizedlist>
            <para>When using the <link linkend="preview">&MESH; Preview Channel</link>, ARNs must
              use the <replaceable>us-west-2</replaceable> Region and use
                <code>appmesh-preview</code>, instead of <code>appmesh</code>. For example, the ARN
              of a virtual node in the &MESH; Preview Channel is <code>arn:aws:<emphasis role="bold"
                  >appmesh-preview</emphasis>:<emphasis role="bold"
                  >us-west-2</emphasis>:<replaceable>&ExampleAWSAccountNo1;</replaceable>:mesh/<replaceable>meshName</replaceable>/virtualNode/<replaceable>virtualNodeName</replaceable></code>.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section id="envoy-optional-config">
      <info>
        <title id="envoy-optional-config.title">Optional variables</title>
      </info>
      <para>The following environment variable is optional for &MESH; Envoy containers.</para>
      <variablelist>
        <varlistentry>
          <term><code>ENVOY_LOG_LEVEL</code></term>
          <listitem>
            <para>Specifies the log level for the Envoy container.</para>
            <para>Valid values: <code>trace</code>, <code>debug</code>, <code>info</code>,
                <code>warning</code>, <code>error</code>, <code>critical</code>,
              <code>off</code></para>
            <para>Default: <code>info</code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><code>ENVOY_INITIAL_FETCH_TIMEOUT</code></term>
          <listitem>
            <para>Specifies the amount of time an Envoy will wait for first configuration response
              from the management server during the initialization process.</para>
            <para>For more information, see <ulink
                url="https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/config_source.proto#envoy-v3-api-field-config-core-v3-configsource-initial-fetch-timeout"
                >Configuration sources</ulink> in Envoy Documentation. 0 indicates there is no
              timeout.</para>
            <para>Default: <code>0</code></para>
          </listitem>
        </varlistentry>
      </variablelist>

      <section id="envoy-admin-variables">
        <info>
          <title id="envoy-admin-variables.title">Admin variables</title>
        </info>
        <para>These environment variables let you configure Envoy's administrative interface.</para>
        <variablelist>
          <varlistentry>
            <term><code>ENVOY_ADMIN_ACCESS_PORT</code></term>
            <listitem>
              <para>Specify a custom admin port for Envoy to listen on. Default:
                <code>9901</code>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><code>ENVOY_ADMIN_ACCESS_LOG_FILE</code></term>
            <listitem>
              <para>Specify a custom path to write Envoy access logs to. Default:
                  <code>/tmp/envoy_admin_access.log</code>.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="tracing-variables">
        <info>
          <title id="tracing-variables.title">Tracing variables</title>
        </info>
        <para>You can configure none, or one of the following tracing drivers.</para>
        <section id="envoy-xray-config">
          <info>
            <title id="envoy-xray-config.title">&xraylong; variables</title>
          </info>
          <para>The following environment variables help you to configure &MESH; with &xraylong;.
            For more information, see the &link-xray-dev;.</para>
          <variablelist>
            <varlistentry>
              <term><code>ENABLE_ENVOY_XRAY_TRACING</code></term>
              <listitem>
                <para>Enables &xray; tracing using <code>127.0.0.1:2000</code> as the default daemon
                  endpoint. To enable, set the value to <code>1</code> (default value is
                    <code>0</code>).</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term><code>XRAY_DAEMON_PORT</code></term>
              <listitem>
                <para>Specify a port value to override the default &xray; daemon port:
                    <code>2000</code>.</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>
        <section id="datadog-tracing">
          <info>
            <title id="datadog-tracing.title">Datadog tracing variables</title>
          </info>
          <para>The following environment variables help you configure &MESH; with the Datadog agent
            tracer. For more information, see <ulink
              url="https://docs.datadoghq.com/tracing/send_traces/">Agent Configuration</ulink> in
            the Datadog documentation.</para>
          <variablelist>
            <varlistentry>
              <term><code>ENABLE_ENVOY_DATADOG_TRACING</code></term>
              <listitem>
                <para>Enables Datadog trace collection using <code>127.0.0.1:8126</code> as the
                  default Datadog agent endpoint. To enable, set the value to <code>1</code>
                  (default value is <code>0</code>).</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term><code>DATADOG_TRACER_PORT</code></term>
              <listitem>
                <para>Specify a port value to override the default Datadog agent port:
                    <code>8126</code>.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term><code>DATADOG_TRACER_ADDRESS</code></term>
              <listitem>
                <para>Specify an IP address to override the default Datadog agent address:
                    <code>127.0.0.1</code>.</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>
        <section id="jaeger-tracing">
          <info>
            <title id="jaeger-tracing.title">Jaeger tracing variables</title>
          </info>
          <para>The following environment variables help you configure &MESH; with Jaeger tracing.
            For more information, see <ulink
              url="https://www.jaegertracing.io/docs/1.21/getting-started/">Getting Started</ulink>
            in the Jaeger documentation. These variables are supported with
              <code>v1.16.1.0-prod</code> or later version of the Envoy image.</para>
          <variablelist>
            <varlistentry>
              <term><code>ENABLE_ENVOY_JAEGER_TRACING</code></term>
              <listitem>
                <para>Enables Jaeger trace collection using <code>127.0.0.1:9411</code> as the
                  default Jaeger endpoint. To enable, set the value to <code>1</code> (default value
                  is <code>0</code>).</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term><code>JAEGER_TRACER_PORT</code></term>
              <listitem>
                <para>Specify a port value to override the default Jaeger port:
                  <code>9411</code>.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term><code>JAEGER_TRACER_ADDRESS</code></term>
              <listitem>
                <para>Specify an IP address to override the default Jaeger address:
                    <code>127.0.0.1</code>.</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>
        <section id="envoy-tracing">
          <info>
            <title id="envoy-tracing.title">Envoy tracing variable</title>
          </info>
          <para>The following environment variable enables you to use your own tracing
            configuration. </para>
          <variablelist>
            <varlistentry>
              <term><code>ENVOY_TRACING_CFG_FILE</code></term>
              <listitem>
                <para>Specify a file path in the Envoy container file system. For more information,
                  see <ulink
                    url="https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/trace/v3/http_tracer.proto#envoy-v3-api-msg-config-trace-v3-tracing"
                      ><code>config.trace.v3.Tracing</code></ulink> in the Envoy
                  documentation.</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>
      </section>
      <section id="envoy-dogstatsd-config">
        <info>
          <title id="envoy-dogstatsd-config.title">DogStatsD variables</title>
        </info>
        <para>The following environment variables help you to configure &MESH; with DogStatsD. For
          more information, see the <ulink url="https://docs.datadoghq.com/developers/dogstatsd/"
            >DogStatsD</ulink> documentation.</para>
        <variablelist>
          <varlistentry>
            <term><code>ENABLE_ENVOY_DOG_STATSD</code></term>
            <listitem>
              <para>Enables DogStatsD stats using <code>127.0.0.1:8125</code> as the default daemon
                endpoint. To enable, set the value to <code>1</code>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><code>STATSD_PORT</code></term>
            <listitem>
              <para>Specify a port value to override the default DogStatsD daemon port.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><code>STATSD_ADDRESS</code></term>
            <listitem>
              <para>Specify an IP address value to override the default DogStatsD daemon IP address.
                Default: <code>127.0.0.1</code>. This variable can only be used with version
                  <code>1.15.0</code> or later of the Envoy image.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="envoy-appmesh-variables">
        <info>
          <title id="envoy-appmesh-variables.title">&MESH; variables</title>
        </info>
        <para>The following variables help you configure &MESH;.</para>
        <variablelist>
          <varlistentry>
            <term><code>APPMESH_PREVIEW</code></term>
            <listitem>
              <para>Set the value to <code>1</code> to connect to the &MESH; Preview Channel
                endpoint. For more information about using the &MESH; Preview Channel, see <xref
                  linkend="preview" endterm="preview.title"/>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><code>APPMESH_RESOURCE_CLUSTER</code></term>
            <listitem>
              <para>By default &MESH; uses the name of the resource you specified in
                  <code>APPMESH_RESOURCE_ARN</code> when Envoy is referring to itself in metrics and
                traces. You can override this behavior by setting the
                  <code>APPMESH_RESOURCE_CLUSTER</code> environment variable with your own name.
                This variable can only be used with version <code>1.15.0</code> or later of the
                Envoy image.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="envoy-stats-config">
        <info>
          <title id="envoy-stats-config.title">Envoy stats variables</title>
        </info>
        <para>The following environment variables help you to configure &MESH; with Envoy Stats. For
          more information, see the <ulink
            url="https://www.envoyproxy.io/docs/envoy/v1.6.0/api-v2/config/metrics/v2/stats.proto"
            >Envoy Stats</ulink> documentation.</para>
        <variablelist>
          <varlistentry>
            <term><code>ENABLE_ENVOY_STATS_TAGS</code></term>
            <listitem>
              <para>Enables the use of &MESH; defined tags <code>appmesh.mesh</code> and
                  <code>appmesh.virtual_node</code>. For more information, see <ulink
                    url="https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/metrics/v3/stats.proto#config-metrics-v3-tagspecifier"
                    >config.metrics.v3.TagSpecifier</ulink> in the Envoy documentation. To enable, set
                the value to <code>1</code>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><code>ENVOY_STATS_CONFIG_FILE</code></term>
            <listitem>
              <para>Specify a file path in the Envoy container file system to override the default
                Stats tags configuration file with your own. For more information, see <ulink
                  url="https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/metrics/v3/stats.proto#config-metrics-v3-statsconfig"
                  >config.metrics.v3.StatsConfig</ulink>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><code>ENVOY_STATS_SINKS_CFG_FILE</code></term>
            <listitem>
              <para>Specify a file path in the Envoy container file system to override the default
                configuration with your own. For more information, see <ulink
                  url="https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/metrics/v3/stats.proto#config-metrics-v3-statssink"
                  >config.metrics.v3.StatsSink</ulink> in the Envoy documentation.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="envoy-deprecated-variables">
        <info>
          <title id="envoy-deprecated-variables.title">Deprecated variables</title>
        </info>
        <para>The environment variables <code>APPMESH_VIRTUAL_NODE_NAME</code> and
            <code>APPMESH_RESOURCE_NAME</code> are no longer supported in Envoy version
            <code>1.15.0</code> or later, but are still supported for existing meshes. Instead of
          using these variables with Envoy version <code>1.15.0</code> or later, use
            <code>APPMESH_RESOURCE_ARN</code> for all &MESH; endpoints.</para>
      </section>
    </section>
  </section>
  <section role="topic" id="envoy-defaults">
    <info>
      <title id="envoy-defaults.title">Envoy defaults set by &MESH;</title>
    </info>
    <para>The following sections provide information on the Envoy defaults for the route retry
      policy and circuit breaker that are set by &MESH;.</para>
    <section id="default-retry-policy">
      <info>
        <title id="default-retry-policy.title">Default route retry policy</title>
      </info>
      <para>If you had no meshes in your account before &default-route-retry-policy-date;, then
        &MESH; automatically creates a default Envoy route retry policy for all HTTP, HTTP/2, and
        gRPC requests in any mesh in your account on or after &default-route-retry-policy-date;. If
        you had any meshes in your account before &default-route-retry-policy-date;, then no default
        policy is created for any Envoy routes that existed before, on, or after
        &default-route-retry-policy-date;, unless you <ulink type="console"
          url="support/home#/case/create">open a ticket with &AWS; support</ulink>. Once support
        processes the ticket, then the default policy will be created for any future Envoy routes
        that &MESH; creates on or after the date that the ticket was processed. For more information
        about Envoy route retry policies, see <ulink
          url="https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route_components.proto#envoy-v3-api-msg-config-route-v3-retrypolicy"
          >config.route.v3.RetryPolicy</ulink> in the Envoy documentation.</para>
      <para>&MESH; creates an Envoy route when you either create an &MESH; <link linkend="routes"
          >route</link> or define a virtual node provider for an &MESH; <link
          linkend="virtual_services">virtual service</link>. Though you can create an &MESH; route
        retry policy, you can't create an &MESH; retry policy for a virtual node provider.</para>
      <para>The default policy is not visible through the &MESH; API. The default policy is only
        visible through Envoy. To view the configuration, <link
          linkend="ts-bp-enable-proxy-admin-interface">enable the administration interface</link>
        and send a request to Envoy for a <code>config_dump</code>. The default policy includes the
        following settings:</para>
      <itemizedlist>
        <listitem>
          <para><guilabel>Max retries</guilabel> &endash; <code>2</code></para>
        </listitem>
        <listitem>
          <para><guilabel>gRPC retry events</guilabel> &endash; <code>UNAVAILABLE</code></para>
        </listitem>
        <listitem>
          <para><guilabel>HTTP retry events</guilabel> &endash; <code>503</code></para>
          <note>
            <para>It's not possible to create an &MESH; route retry policy that looks for a specific
              HTTP error code, however an &MESH; route retry policy can look for
                <code>server-error</code> or <code>gateway-error</code>, which both include
                <code>503</code> errors. For more information, see <xref linkend="routes"
                endterm="routes.title"/>.</para>
          </note>
        </listitem>
        <listitem>
          <para><guilabel>TCP retry event</guilabel> &endash; <code>connect-failure</code> and
              <code>refused-stream</code></para>
          <note>
            <para>It's not possible to create an &MESH; route retry policy that looks for either of
              these events, however an &MESH; route retry policy can look for
                <code>connection-error</code>, which is equivalent to <code>connect-failure</code>.
              For more information, see <xref linkend="routes" endterm="routes.title"/>.</para>
          </note>
        </listitem>
        <listitem>
          <para><guilabel>Reset</guilabel> &endash; Envoy will attempt a retry if the upstream
            server does not respond at all (disconnect/reset/read timeout).</para>
        </listitem>
      </itemizedlist>
    </section>
    <section id="default-circuit-breaker">
      <info>
        <title id="default-circuit-breaker.title">Default circuit breaker</title>
      </info>
      <para>When you deploy an Envoy in &MESH;, Envoy default values are set for some of the circuit
        breaker settings. For more information, see <ulink
          url="https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/cluster/circuit_breaker.proto#cluster-circuitbreakers-thresholds"
          >cluster.CircuitBreakers.Thresholds</ulink> in the Envoy documentation. The settings are
        not visible through the &MESH; API. The settings are only visible through Envoy. To view the
        configuration, <link linkend="ts-bp-enable-proxy-admin-interface">enable the administration
          interface</link> and send a request to Envoy for a <code>config_dump</code>.</para>
      <para>If you had no meshes in your account before &default-route-retry-policy-date;, then for
        each Envoy that you deploy in a mesh created on or after &default-route-retry-policy-date;,
        &MESH; effectively disables circuit breakers by changing the Envoy default values for the
        settings that follow. If you had any meshes in your account before
        &default-route-retry-policy-date;, then the Envoy default values are set for any Envoy that
        you deploy in &MESH; on, or after &default-route-retry-policy-date;, unless you <ulink
          type="console" url="support/home#/case/create">open a ticket with &AWS; support</ulink>.
        Once support processes the ticket, then the &MESH; default values for the following Envoy
        settings are set by &MESH; on all Envoys that you deploy after the date that the ticket is
        processed:</para>
      <itemizedlist>
        <listitem>
          <para><code><emphasis role="bold">max_requests</emphasis></code> &endash;
              <code>2147483647</code></para>
        </listitem>
        <listitem>
          <para><code><emphasis role="bold">max_pending_requests</emphasis></code> &endash;
              <code>2147483647</code></para>
        </listitem>
        <listitem>
          <para><code><emphasis role="bold">max_connections</emphasis></code> &endash;
              <code>2147483647</code></para>
        </listitem>
        <listitem>
          <para><code><emphasis role="bold">max_retries</emphasis></code> &endash;
              <code>2147483647</code></para>
        </listitem>
      </itemizedlist>
      <note>
        <para>Whether your Envoys have the Envoy or &MESH; default circuit breaker values, you are
          not able to modify the values.</para>
      </note>
    </section>
  </section>
  <section role="topic" id="1.17-migration">
    <info>
      <title id="1.17-migration.title">Updating/migrating to Envoy 1.17</title>
    </info>
    <section id="spire-update">
      <info>
        <title id="spire-update.title">Secret Discovery Service with SPIRE</title>
      </info>
      <para>If you are using SPIRE (SPIFFE Runtime Environment) with &MESH; to distribute trust
        certificates to your services, verify that you are using at least version
          <code>0.12.0</code> of the <ulink
          url="https://github.com/spiffe/spire/releases/tag/v0.12.0">SPIRE agent</ulink> (released
        December 2020). This is the first version that can support Envoy versions after
          <code>1.16</code>.</para>
    </section>
    <section id="regular-expressions">
      <info>
        <title id="regular-expressions.title">Regular expression changes</title>
      </info>
      <para>Starting from Envoy <code>1.17</code>, &MESH; will configure Envoy to use the <ulink
          url="https://github.com/google/re2">RE2</ulink> regular expression engine. This change
        should be transparent to most users, but matches in Routes or Gateway Routes will no longer
        allow look-ahead or back-references in regular expressions.</para>
      <section id="positive-look-ahead">
        <info>
          <title id="positive-look-ahead.title">Positive and Negative look-ahead</title>
        </info>
        <para><emphasis role="bold">Positive -</emphasis> A positive look-ahead is a parenthesized
          expression that starts with <code>?=</code>:</para>
        <programlisting>(?=example)</programlisting>
        <para>These have the most utility when doing string replacement, as they allow matching a
          string without consuming the characters as part of the match. Since &MESH; does not
          support regex string replacement, we suggest replacing these with regular matches:</para>
        <programlisting>(example)</programlisting>
        <para><emphasis role="bold">Negative -</emphasis> A negative look-ahead is a parenthesized
          expression that starts with <code>?!</code>:</para>
        <programlisting>ex(?!amp)le</programlisting>
        <para>The parenthesized expressions are used to assert that part of the expression does not
          match a given input. These can usually be replaced with a zero quantifier:</para>
        <programlisting>ex(amp){0}le</programlisting>
        <para>If the expression itself is a character class, you could simply negate the whole class
          and mark it optional using <code>?</code>:</para>
        <programlisting>prefix(?![0-9])suffix => prefix[^0-9]?suffix</programlisting>
        <para>Depending on your use-case, you may also be able to change your routes to better
          handle this. Consider this example:</para>
        <programlisting>{
    "routeSpec": {
        "priority": 0,
        "httpRoute": {
            "match": {
                "headers": [
                    {
                        "name": "x-my-example-header",
                        "match": {
                            "regex": "^prefix(?!suffix)"
                        }
                    }
                ]
            }
        }
    }
}

{
    "routeSpec": {
        "priority": 1,
        "httpRoute": {
            "match": {
                "headers": [
                    {
                        "name": "x-my-example-header",
                        "match": {
                            "regex": "^prefix"
                        }
                    }
                ]
            }
        }
    }
} </programlisting>
        <para>The first route match looks for a header that starts with “prefix” but not followed by
          “suffix”. The second route acts to match all other headers that begin with “prefix”,
          including those that end in “suffix”. These could instead be reversed as a way to remove
          the negative look-ahead:</para>
        <programlisting>{
    "routeSpec": {
        "priority": 0,
        "httpRoute": {
            "match": {
                "headers": [
                    {
                        "name": "x-my-example-header",
                        "match": {
                            "regex": "^prefix.*?suffix"
                        }
                    }
                ]
            }
        }
    }
}

{
    "routeSpec": {
        "priority": 1,
        "httpRoute": {
            "match": {
                "headers": [
                    {
                        "name": "x-my-example-header",
                        "match": {
                            "regex": "^prefix"
                        }
                    }
                ]
            }
        }
    }
}</programlisting>
        <para>Here we reverse the routes to give higher priority to headers that end in “suffix”,
          and all other headers that start with “prefix” are matched in the lower-priority
          route.</para>
      </section>
    </section>
    <section id="back-references">
      <info>
        <title id="back-references.title">Back references</title>
      </info>
      <para>A back-reference is a way to write shorter expressions by repeating to a previous
        parenthesized group. They have this form:</para>
      <programlisting>(group1)(group2)\1</programlisting>
      <para>A backslash <code>\</code> followed by a number acts as a placeholder for the n-th
        parenthesized group in the expression. In this example <code>\1</code> is used as an
        alternative way to write <code>(group1)</code> a second time:</para>
      <programlisting>(group1)(group2)(group1)</programlisting>
      <para>These can be removed by simply replacing the back-reference with the group being
        referenced as in the example above.</para>
    </section>
  </section>
  <!--<section role="topic" id="bring-own-envoy">
    <info>
      <title id="bring-own-envoy.title">Bring your own Envoy</title>
    </info>
    <para>You can bring your own Envoy image to &MESH;, but that image version has to be compatible
      with &MESH;. Customizations are also limited to those that are statically configure.</para>
    <para>You can check which versions are supported by &MESH; in the <ulink
      url="&url-doc-domain;app-mesh/latest/userguide/envoy.html">Envoy image</ulink> section.</para>
  </section>-->
</chapter>
