<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "file://zonbook/docbookx.dtd"
 [
  <!ENTITY % xinclude SYSTEM "file://AWSShared/common/xinclude.mod">
    %xinclude;
    <!ENTITY % phrases-shared SYSTEM "file://AWSShared/common/phrases-shared.ent">
    %phrases-shared;
    <!ENTITY % phrases-appmesh SYSTEM "../shared/phrases-app-mesh.ent"> 
    %phrases-appmesh;
 ]>
<chapter id="troubleshooting">
    <info>
        <title id="troubleshooting.title">&MESH; troubleshooting</title>
        <titleabbrev>Troubleshooting</titleabbrev>
        <abstract>
            <para>Learn how to troubleshoot common issues when using &MESH;.</para>
        </abstract>
    </info>
    <para>This chapter discusses troubleshooting best practices and common issues that you might
        encounter when using &MESH;. Select one of the following areas to review best practices and
        common issues for that area.</para>
    <para role="topiclist"/>
    <section id="troubleshooting-best-practices" role="topic">
        <info>
            <title id="troubleshooting-best-practices.title">&MESH; troubleshooting best
                practices</title>
            <titleabbrev>Best practices</titleabbrev>
        </info>
        <para>We recommend that you follow the best practices in this topic to troubleshoot issues
            when using &MESH;.</para>
        <section id="ts-bp-enable-proxy-admin-interface">
            <info>
                <title id="ts-bp-enable-proxy-admin-interface.title">Enable the Envoy proxy
                    administration interface</title>
            </info>
            <para>The Envoy proxy ships with an administration interface that you can use to
                discover configuration and statistics and to perform other administrative functions
                such as connection draining. For more information, see <ulink
                    url="https://www.envoyproxy.io/docs/envoy/latest/operations/admin"
                    >Administration interface</ulink> in the Envoy documentation.</para>
            <para>If you use the managed <link linkend="envoy" endterm="envoy.title"/>, the
                administration endpoint is enabled by default on port 9901. Examples provided in
                    <xref linkend="troubleshooting-setup" endterm="troubleshooting-setup.title"/>
                display the example administration endpoint URL as
                    <code>http://my-app.default.svc.cluster.local:9901/</code>. </para>
            <note>
                <para>The administration endpoint should never be exposed to the public internet.
                    Additionally, we recommend monitoring the administration endpoint logs, which
                    are set by the <code>ENVOY_ADMIN_ACCESS_LOG_FILE</code> environment variable to
                        <code>/tmp/envoy_admin_access.log</code> by default. </para>
            </note>
        </section>
        <section id="ts-bp-enable-envoy-statsd-integration">
            <info>
                <title id="ts-bp-enable-envoy-statsd-integration.title">Enable Envoy DogStatsD
                    integration for metric offload</title>
            </info>
            <para>The Envoy proxy can be configured to offload statistics for OSI Layer 4 and Layer
                7 traffic and for internal process health. While this topic shows how to use these
                statistics without offloading the metrics to sinks like CloudWatch metrics and
                Prometheus., having these statistics in a centralized location for all of your
                applications can help you diagnose issues and confirm behavior more quickly. For
                more information, see <ulink
                    url="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/working_with_metrics.html"
                    >Using Amazon &CW; Metrics</ulink> and the <ulink
                    url="https://prometheus.io/docs/introduction/overview/">Prometheus
                    documentation</ulink>. </para>
            <para>You can configure DogStatsD metrics by setting the parameters defined in <link
                    linkend="envoy-dogstatsd-config" endterm="envoy-dogstatsd-config.title"/>. For
                more information about DogStatsD, see the <ulink
                    url="https://docs.datadoghq.com/developers/dogstatsd/?tab=hostagent"
                    >DogStatsD</ulink> documentation. You can find a demonstration of metric offload
                to &AWS; &CW; metrics in the <ulink
                    url="https://github.com/aws/aws-app-mesh-examples/tree/master/walkthroughs/howto-ecs-basics"
                    >&MESH; with &ECS; basics walk-through</ulink> on GitHub.</para>
        </section>
        <section id="ts-bp-enable-access-logs">
            <info>
                <title id="ts-bp-enable-access-logs.title">Enable access logs</title>
            </info>
            <para>We recommend enabling access logs on your <link linkend="virtual_nodes"
                    endterm="virtual_nodes.title"/> and <link linkend="virtual_gateways"
                    endterm="virtual_gateways.title"/> to discover details about traffic transiting
                between your applications. For more information, see <ulink
                    url="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/observability/access_logging"
                    >Access logging</ulink> in the Envoy documentation. The logs provide detailed
                information on OSI Layer 4 and Layer 7 traffic behavior. When you use Envoy’s
                default format, you can analyze the access logs with <ulink type="documentation"
                    url="AmazonCloudWatch/latest/logs/AnalyzingLogData.html">&CWL; Insights</ulink>
                using the following parse statement.</para>
            <programlisting><userinput>parse @message "[*] \"* * *\" * * * * * * * * * * *" as StartTime, Method, Path, Protocol, ResponseCode, ResponseFlags, BytesReceived, BytesSent, DurationMillis, UpstreamServiceTimeMillis, ForwardedFor, UserAgent, RequestId, Authority, UpstreamHost</userinput></programlisting>
        </section>
        <section id="ts-bp-enable-envoy-debug-logging">
            <info>
                <title id="ts-bp-enable-envoy-debug-logging.title">Enable Envoy debug logging in
                    pre-production environments</title>
            </info>
            <para>We recommend setting the Envoy proxy’s log level to <code>debug</code> in a
                pre-production environment. Debug logs can help you identify issues before you
                graduate the associated &MESH; configuration to your production environment. </para>
            <para>If you’re using the <link linkend="envoy">Envoy image</link>, you can set the log
                level to <code>debug</code> through the <code>ENVOY_LOG_LEVEL</code> environment
                variable. </para>
            <note>
                <para>We do not recommend using the <code>debug</code> level in production
                    environments. Setting the level to <code>debug</code> increases the logging and
                    may affect performance and the overall cost of logs offloaded to solutions like
                        <ulink type="documentation"
                        url="AmazonCloudWatch/latest/logs/WhatIsCloudWatchLogs.html">&CWL;</ulink>.
                </para>
            </note>
            <para>When you use Envoy’s default format, you can analyze the process logs with <ulink
                    type="documentation" url="AmazonCloudWatch/latest/logs/AnalyzingLogData.html"
                    >&CWL; Insights</ulink> using the following parse statement: </para>
            <programlisting><userinput>parse @message "[*][*][*][*] [*] *" as Time, Thread, Level, Name, Source, Message</userinput></programlisting>
        </section>
    </section>
    <section id="troubleshooting-setup" role="topic">
        <info>
            <title id="troubleshooting-setup.title">&MESH; setup troubleshooting</title>
            <titleabbrev>Setup</titleabbrev>
        </info>
        <para>This topic details common issues that you may experience with &MESH; setup.</para>
        <section id="ts-setup-cannot-pull-envoy">
            <info>
                <title id="ts-setup-cannot-pull-envoy.title">Cannot pull Envoy container
                    image</title>
            </info>
            <formalpara>
                <title>Symptoms</title>
                <para>You receive the following error message in an &ECS; task. The &ECR;
                        <replaceable>account ID</replaceable> and <replaceable>Region</replaceable>
                    in the following message may be different, depending on which &ECR; repository
                    that you pulled the container image from.</para>
            </formalpara>
            <programlisting role="nocopy">CannotPullContainerError: Error response from daemon: pull access denied for <replaceable>840364872350</replaceable>.dkr.ecr.<replaceable>us-west-2</replaceable>.amazonaws.com/aws-appmesh-envoy, repository does not exist or may require 'docker login'</programlisting>
            <formalpara>
                <title>Resolution</title>
                <para>This error indicates that the task execution role being used does not have
                    permission to communicate to &ECR; and cannot pull the Envoy container image
                    from the repository. The task execution role assigned to your &ECS; task needs
                    an &IAM; policy with the following statements:</para>
            </formalpara>
            <programlisting language="json">{
  "Action": [
    "ecr:BatchCheckLayerAvailability",
    "ecr:GetDownloadUrlForLayer",
    "ecr:BatchGetImage"
  ],
  "Resource": "arn:aws:ecr:<replaceable>us-west-2</replaceable>:<replaceable>&ExampleAWSAccountNo1;</replaceable>:repository/aws-appmesh-envoy",
  "Effect": "Allow"
},
{
  "Action": "ecr:GetAuthorizationToken",
  "Resource": "*",
  "Effect": "Allow"
}</programlisting>
            <para>If your issue is still not resolved, then consider opening a <ulink
                    url="https://github.com/aws/aws-app-mesh-roadmap/issues/new?assignees=&amp;labels=Bug&amp;template=issue--bug-report.md&amp;title=Bug%3A+describe+bug+here"
                    >GitHub issue</ulink> or contact <ulink type="marketing" url="premiumsupport/"
                    >&AWS; Support</ulink>.</para>
        </section>
        <section id="ts-setup-cannot-connect-ems">
            <info>
                <title id="ts-setup-cannot-connect-ems.title">Cannot connect to &MESH; Envoy
                    management service</title>
            </info>
            <formalpara>
                <title>Symptoms</title>
                <para>Your Envoy proxy is unable to connect to the &MESH; Envoy management service.
                    You are seeing:</para>
            </formalpara>
            <itemizedlist>
                <listitem>
                    <para>Connection refused errors</para>
                </listitem>
                <listitem>
                    <para>Connection timeouts</para>
                </listitem>
                <listitem>
                    <para>Errors resolving the &MESH; Envoy management service endpoint</para>
                </listitem>
                <listitem>
                    <para>gRPC errors</para>
                </listitem>
            </itemizedlist>
            <formalpara>
                <title>Resolution</title>

                <para>Make sure that your Envoy proxy has access to the internet or to a private
                        <link linkend="vpc-endpoints">VPC endpoint</link> and that your <ulink
                        type="documentation" url="/vpc/latest/userguide/VPC_SecurityGroups.html"
                        >security groups</ulink> allow outbound traffic on port 443. &MESH;’s public
                    Envoy management service endpoints follow the fully qualified domain name (FQDN)
                    format.</para>
            </formalpara>
            <programlisting># App Mesh Production Endpoint
appmesh-envoy-management.<replaceable>Region-code</replaceable>.amazonaws.com

# App Mesh Preview Endpoint
appmesh-preview-envoy-management.<replaceable>Region-code</replaceable>.amazonaws.com</programlisting>
            <para>You can debug your connection to EMS using the command below. This sends a valid,
                but empty gRPC request to the Envoy Management Service.</para>
            <programlisting>curl -v -k -H 'Content-Type: application/grpc' -X POST https://appmesh-envoy-management.<replaceable>Region-code</replaceable>.amazonaws.com:443/envoy.service.discovery.v3.AggregatedDiscoveryService/StreamAggregatedResources</programlisting>
            <para>If you receive these messages back, your connection to Envoy Management Service is
                functional. For debugging gRPC related errors, see the errors in <ulink
                    url="https://docs.aws.amazon.com/app-mesh/latest/userguide/troubleshooting-setup.html#ts-setup-grpc-error-codes"
                    >Envoy disconnected from App Mesh Envoy management service with error
                    text.</ulink>
            </para>
            <programlisting>grpc-status: 16
grpc-message: Missing Authentication Token</programlisting>
            <para>If your issue is still not resolved, then consider opening a <ulink
                    url="https://github.com/aws/aws-app-mesh-roadmap/issues/new?assignees=&amp;labels=Bug&amp;template=issue--bug-report.md&amp;title=Bug%3A+describe+bug+here"
                    >GitHub issue</ulink> or contact <ulink type="marketing" url="premiumsupport/"
                    >&AWS; Support</ulink>.</para>
        </section>
        <section id="ts-setup-grpc-error-codes">
            <info>
                <title id="ts-setup-grpc-error-codes.title">Envoy disconnected from &MESH; Envoy
                    management service with error text</title>
            </info>
            <formalpara>
                <title>Symptoms</title>

                <para>Your Envoy proxy is unable to connect to the &MESH; Envoy management service
                    and receive its configuration. Your Envoy proxy logs contain a log entry like
                    the following.</para>
            </formalpara>
            <programlisting role="nocopy">gRPC config stream closed: <replaceable>gRPC status code</replaceable>, <replaceable>message</replaceable></programlisting>
            <formalpara>
                <title>Resolution</title>
                <para>In most cases, the message portion of the log should indicate the problem. The
                    following table lists the most common gRPC status codes that you might see,
                    their causes, and their resolutions.</para>
            </formalpara>
            <table frame="all">
                <tgroup cols="3">
                    <colspec colname="c1" colnum="1" colwidth="1.0*"/>
                    <colspec colname="c2" colnum="2" colwidth="1.0*"/>
                    <colspec colname="c3" colnum="2" colwidth="1.0*"/>
                    <thead>
                        <row>
                            <entry>gRPC status code</entry>
                            <entry>Cause</entry>
                            <entry>Resolution</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry><code>0</code></entry>
                            <entry>Graceful disconnect from the Envoy management service.</entry>
                            <entry>There is no issue. &MESH; occasionally disconnects Envoy proxies
                                with this status code. Envoy will reconnect and continue receiving
                                updates.</entry>
                        </row>
                        <row>
                            <entry><code>3</code></entry>
                            <entry>The mesh endpoint (virtual node or virtual gateway), or one of
                                its associated resources, could not be found.</entry>
                            <entry>Double check your Envoy configuration to make sure that it has
                                the appropriate name of the &MESH; resource that it represents. If
                                your &MESH; resource is integrated with other &AWS; resources, such
                                as &CMAP; namespaces or &ACM; certificates, then make sure that
                                those resources exist.</entry>
                        </row>
                        <row>
                            <entry><code>7</code></entry>
                            <entry>The Envoy proxy is unauthorized to perform an action, such as
                                connect to the Envoy management service, or retrieve associated
                                resources.</entry>
                            <entry>Make sure that you <link linkend="create-iam-policy">create an
                                    &IAM; policy </link> that has the appropriate policy statements
                                for &MESH; and other services and attach that policy to the &IAM;
                                user or role that your Envoy proxy is using to connect to the Envoy
                                management service. </entry>
                        </row>
                        <row>
                            <entry><code>8</code></entry>
                            <entry>The number of Envoy proxies for a given &MESH; resource exceeds
                                the account-level service quota.</entry>
                            <entry>See <link linkend="service-quotas" endterm="service-quotas.title"
                                /> for information on default account quotas and how to request a
                                quota increase.</entry>
                        </row>
                        <row>
                            <entry><code>16</code></entry>
                            <entry>The Envoy proxy does not have valid authentication credentials
                                for &AWS;.</entry>
                            <entry>Make sure that the Envoy has appropriate credentials to connect
                                to &AWS; services through an &IAM; user or role.</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <para>You can observe the status codes and messages from your Envoy proxy with <ulink
                    type="documentation" url="AmazonCloudWatch/latest/logs/AnalyzingLogData.html"
                    >&CWlong; Insights</ulink> by using the following query:</para>
            <programlisting><userinput>filter @message like /gRPC config stream closed/
| parse @message "gRPC config stream closed: *, *" as StatusCode, Message</userinput></programlisting>
            <para>If the provided error message was not helpful, or your issue is still not
                resolved, then consider opening a <ulink
                    url="https://github.com/aws/aws-app-mesh-roadmap/issues/new?assignees=&amp;labels=Bug&amp;template=issue--bug-report.md&amp;title=Bug%3A+describe+bug+here"
                    >GitHub
                issue</ulink><!-- or contact <ulink type="marketing" url="premiumsupport/"
                    >&AWS; Support</ulink>-->.</para>
        </section>
        <section id="ts-setup-envoy-container-checks">
            <info>
                <title id="ts-setup-envoy-container-checks.title">Envoy container health check,
                    readiness probe, or liveliness probe failing</title>
            </info>
            <formalpara>
                <title>Symptoms</title>
                <para>Your Envoy proxy is failing health checks in an &ECS; task, &EC2; instance, or
                    Kubernetes pod. For example, you query the Envoy administration interface with
                    the following command and receive a status other than <code>LIVE</code>.</para>
            </formalpara>
            <programlisting role="nocopy"><userinput>curl -s http://<replaceable>my-app.default.svc.cluster.local</replaceable>:<replaceable>9901</replaceable>/server_info | jq '.state'</userinput></programlisting>
            <formalpara>
                <title>Resolution</title>
                <para>The following is a list of remediation steps depending on the status returned
                    by the Envoy proxy.</para>
            </formalpara>
            <itemizedlist>
                <listitem>
                    <para><code>PRE_INITIALIZING</code> or <code>INITIALIZING</code> &endash; The
                        Envoy proxy has yet to receive configuration, or cannot connect and retrieve
                        configuration from &MESH; Envoy management service. The Envoy may be
                        receiving an error from the Envoy management service when trying to connect.
                        For more information, see the errors in <xref
                            linkend="ts-setup-grpc-error-codes"
                            endterm="ts-setup-grpc-error-codes.title"/>.</para>
                </listitem>
                <listitem>
                    <para><code>DRAINING</code> &endash; The Envoy proxy has begun draining
                        connections in response to a <code>/healthcheck/fail</code> or
                            <code>/drain_listeners</code> request on the Envoy administration
                        interface. We do not recommend invoking these paths on the administration
                        interface unless you are about to terminate your &ECS; task, &EC2; instance,
                        or Kubernetes pod.</para>
                </listitem>
            </itemizedlist>
            <para>If your issue is still not resolved, then consider opening a <ulink
                    url="https://github.com/aws/aws-app-mesh-roadmap/issues/new?assignees=&amp;labels=Bug&amp;template=issue--bug-report.md&amp;title=Bug%3A+describe+bug+here"
                    >GitHub issue</ulink> or contact <ulink type="marketing" url="premiumsupport/"
                    >&AWS; Support</ulink>.</para>
        </section>
        <section id="ts-setup-lb-mesh-endpoint-health-check">
            <info>
                <title id="ts-setup-lb-mesh-endpoint-health-check.title">Health check from the load
                    balancer to the mesh endpoint is failing</title>
            </info>
            <formalpara>
                <title>Symptoms</title>
                <para>Your mesh endpoint is considered healthy by the container health check or
                    readiness probe, but the health check from the load balancer to the mesh
                    endpoint is failing.</para>
            </formalpara>
            <formalpara>
                <title>Resolution</title>
                <para>To resolve the issue, complete the following tasks.</para>
            </formalpara>
            <itemizedlist>
                <listitem>
                    <para>Make sure that the <ulink type="documentation"
                            url="vpc/latest/userguide/VPC_SecurityGroups.html">security
                            group</ulink> associated with your mesh endpoint accepts inbound traffic
                        on the port you've configured for your health check.</para>
                </listitem>
                <listitem>
                    <para>Make sure that the health check is succeeding consistently when requested
                        manually; for example, from a <ulink type="marketing"
                            url="quickstart/architecture/linux-bastion/">bastion host within your
                            VPC</ulink>.</para>
                </listitem>
                <listitem>
                    <para>If you are configuring a health check for a virtual node, then we
                        recommend implementing a health check endpoint in your application; for
                        example, /ping for HTTP. This ensures that both the Envoy proxy and your
                        application are routable from the load balancer.</para>
                </listitem>
                <listitem>
                    <para>You can use any elastic load balancer type for the virtual node, depending
                        on the features that you need. For more information, see <ulink
                            type="marketing" url="elasticloadbalancing/features/#compare">Elastic
                            Load Balancing features</ulink>.</para>
                </listitem>
                <listitem>
                    <para>If you are configuring a health check for a <link
                            linkend="virtual_gateways">virtual gateway</link>, then we recommend
                        using a <ulink type="documentation"
                            url="elasticloadbalancing/latest/network/network-load-balancers.html"
                            >network load balancer</ulink> with a TCP or TLS health check on the
                        virtual gateway's listener port. This ensures that the virtual gateway
                        listener is bootstrapped and ready to accept connections.</para>
                </listitem>
            </itemizedlist>
            <para>If your issue is still not resolved, then consider opening a <ulink
                    url="https://github.com/aws/aws-app-mesh-roadmap/issues/new?assignees=&amp;labels=Bug&amp;template=issue--bug-report.md&amp;title=Bug%3A+describe+bug+here"
                    >GitHub issue</ulink> or contact <ulink type="marketing" url="premiumsupport/"
                    >&AWS; Support</ulink>.</para>
        </section>
        <section id="virtual-gateway-low-ports">
            <info>
                <title id="virtual-gateway-low-ports.title">Virtual gateway not accepting traffic on
                    ports 1024 or less</title>
            </info>
            <formalpara>
                <title>Symptoms</title>
                <para>Your virtual gateway is not accepting traffic on port 1024 or less, but does
                    accept traffic on a port number that is greater than 1024. For example, you
                    query the Envoy stats with the following command and receive a value other than
                    zero.</para>
            </formalpara>
            <programlisting role="nocopy"><userinput>curl -s http://my-app.default.svc.cluster.local:9901/stats | grep "update_rejected"</userinput></programlisting>
            <para>You might see text similar to the following text in your logs describing a failure
                to bind to a privileged port:</para>
            <programlisting role="nocopy">gRPC config for type.googleapis.com/envoy.api.v2.Listener rejected: Error adding/updating listener(s) lds_ingress_0.0.0.0_port_&lt;port num>: cannot bind '0.0.0.0:&lt;port num&gt;': Permission denied</programlisting>
            <formalpara>
                <title>Resolution</title>
                <para>To resolve the issue, the user specified for the gateway needs to have the
                    linux capability <code>CAP_NET_BIND_SERVICE</code>. For more information, see
                        <ulink url="https://www.man7.org/linux/man-pages/man7/capabilities.7.html"
                        >Capabilities</ulink> in the Linux Programmer's Manual, <ulink
                        type="documentation"
                        url="AmazonECS/latest/developerguide/task_definition_parameters.html#container_definition_linuxparameters"
                        >Linux parameters</ulink> in ECS Task definition parameters, and <ulink
                        url="https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-capabilities-for-a-container"
                        >Set capabilities for a container</ulink> in the Kubernetes
                    documentation.</para>
            </formalpara>
            <important>
                <para>Fargate must use a port value greater than 1024.</para>
            </important>
            <para>If your issue is still not resolved, then consider opening a <ulink
                    url="https://github.com/aws/aws-app-mesh-roadmap/issues/new?assignees=&amp;labels=Bug&amp;template=issue--bug-report.md&amp;title=Bug%3A+describe+bug+here"
                    >GitHub issue</ulink> or contact <ulink type="marketing" url="premiumsupport/"
                    >&AWS; Support</ulink>.</para>
        </section>
        <!-- <section id="ts-setup-503-during-deployment">
            <info>
                <title id="ts-setup-envoy-503-during-deployment.title">HTTP 503 errors during
                    application deployment</title>
            </info>
            <formalpara>
                <title>Symptoms</title>
                <para>When deploying a new revision of an application in &MESH;, each client
                    application’s Envoy has to be made aware of the new endpoints. In effect, all
                    virtual nodes in a service mesh are redirecting traffic to a new destination. As
                    you might expect, these are exactly the kinds of scenarios where failed requests
                    can creep into your system.</para>
            </formalpara>
            <para>While in some cases these failures can occur due to failed in-flight requests,
                they can also occur because Envoy can enter a brief state where it has no viable
                place to send traffic. For more information about implementing resilient retries,
                see <link linkend="route-retries"/>.</para>
            <para>For example, suppose that you're seeing a significant number of errors during a
                deployment of a virtual node named <code>virtual-node-a</code> in a mesh named
                    <code>prod</code>. You can look at the metrics from one of the applications
                reporting failures, and you'll see something like this:</para>
            <programlisting role="nocopy">cluster.cds_egress_<replaceable>prod</replaceable>_<replaceable>virtual-node-a</replaceable>_http_3000.health_check.attempt: 1960
cluster.cds_egress_<replaceable>prod</replaceable>_<replaceable>virtual-node-a</replaceable>_http_3000.health_check.degraded: 0
cluster.cds_egress_<replaceable>prod</replaceable>_<replaceable>virtual-node-a</replaceable>_http_3000.*health_check.failure*: 7
cluster.cds_egress_<replaceable>prod</replaceable>_<replaceable>virtual-node-a</replaceable>_http_3000.health_check.healthy: 3
cluster.cds_egress_<replaceable>prod</replaceable>_<replaceable>virtual-node-a</replaceable>_http_3000.health_check.network_failure: 2
cluster.cds_egress_<replaceable>prod</replaceable>_<replaceable>virtual-node-a</replaceable>_http_3000.health_check.passive_failure: 0
cluster.cds_egress_<replaceable>prod</replaceable>_<replaceable>virtual-node-a</replaceable>_http_3000.health_check.success: 1953
cluster.cds_egress_<replaceable>prod</replaceable>_<replaceable>virtual-node-a</replaceable>_http_3000.health_check.verify_cluster: 0
cluster.cds_egress_<replaceable>prod</replaceable>_<replaceable>virtual-node-a</replaceable>_http_3000.*lb_healthy_panic*: 559
cluster.cds_egress_<replaceable>prod</replaceable>_<replaceable>virtual-node-a</replaceable>_http_3000.membership_healthy: 3
cluster.cds_egress_<replaceable>prod</replaceable>_<replaceable>virtual-node-a</replaceable>_http_3000.*upstream_cx_none_healthy*: 495</programlisting>
            <para>While the number of health failures is small (you’re not seeing a persistent
                issue) in the previous example metrics, you see there is a significant number of
                times when the cluster was in panic because less than 50% of destinations were
                healthy. Worse, there was a period where no hosts were healthy. This tells you that
                Envoy saw a period where no destination for <code>virtual-node-a</code> traffic was
                healthy. This typically occurs because &MESH; is spinning up and tearing down
                applications faster than it is able to reconcile these changes at the Envoy.</para>
            <formalpara>
                <title>Resolution</title>

                <para>To mitigate against this, we recommend setting a gradual rolling
                    deployment:</para>
            </formalpara>
            <itemizedlist>
                <listitem>
                    <para>For &ECS;, set a minimum healthy percentage of 100% and a maximum healthy
                        percentage of 125% (if 4 or more tasks) or 150% (if less than 4
                        tasks)</para>
                </listitem>
                <listitem>
                    <para>For Kubernetes, set a minimum healthy percentage of 100% and a maximum
                        healthy percentage of 125%</para>
                </listitem>
            </itemizedlist>
            <para>We also recommend setting a retry strategy on your application with the following
                configuration:</para>
            <programlisting language="yaml">retryPolicy:
   maxRetries: 3
   perRetryTimeout:
     value: 1
     unit: s
   grpcRetryEvents:
     - cancelled
     - unavailable
   httpRetryEvents:
     - server-error
     - gateway-error
   tcpRetryEvents:
     - connection-error</programlisting>
            <para>It is important not to set your <code>perRetryTimeout</code> too low, or the
                elevation in the <code>upstream_rq_per_try_timeout</code> metric for the virtual
                node can actually make your failed request worse. For example, if you accidentally
                set a timeout of 5 ms rather than 5s, you would see the following metrics for a
                virtual node named <code>virtual-node-a</code> in a mesh named
                <code>prod</code>.</para>
            <programlisting role="nocopy">cluster.cds_egress_prod_user_http_3000.upstream_rq_504: 1230
cluster.cds_egress_prod_user_http_3000.upstream_rq_5xx: 1230
cluster.cds_egress_prod_user_http_3000.upstream_rq_per_try_timeout: 1230</programlisting>
            <para>As you can see in the previous example, every timed out request was categorized as
                a <code>504</code> and sent back to the application as such. Correcting the units
                error fixes the issue, and you would no longer see timeouts.</para>
            <para>If your issue is still not resolved, then consider opening a <ulink
                    url="https://github.com/aws/aws-app-mesh-roadmap/issues/new?assignees=&amp;labels=Bug&amp;template=issue-bug-report.md&amp;title=Bug%3A+describe+bug+here"
                    >GitHub issue</ulink> or contact <ulink type="marketing" url="premiumsupport/"
                    >&AWS; Support</ulink>.</para>
        </section> -->
    </section>
    <section id="troubleshoot-connectivity" role="topic">
        <info>
            <title id="troubleshooting-connectivity.title">&MESH; connectivity
                troubleshooting</title>
            <titleabbrev>Connectivity</titleabbrev>
        </info>
        <para>This topic details common issues that you may experience with &MESH;
            connectivity.</para>
        <section id="ts-connectivity-dns-resolution-virtual-service">
            <info>
                <title id="ts-connectivity-dns-resolution-virtual-service.title">Unable to resolve
                    DNS name for a virtual service</title>
            </info>
            <formalpara>
                <title>Symptoms</title>
                <para>Your application is unable to resolve the DNS name of a virtual service that
                    it is attempting to connect to.</para>
            </formalpara>
            <formalpara>
                <title>Resolution</title>
                <para>This is a known issue. For more information, see the <ulink
                        url="https://github.com/aws/aws-app-mesh-roadmap/issues/65">Name
                        VirtualServices by any hostname or FQDN</ulink> GitHub issue. Virtual
                    services in &MESH; can be named anything. As long as there is a DNS
                        <code>A</code> record for the virtual service name and the application can
                    resolve the virtual service name, the request will be proxied by Envoy and
                    routed to its appropriate destination. To resolve the issue, add a DNS
                        <code>A</code> record to any non-loopback IP address, such as
                        <code>10.10.10.10</code>, for the virtual service name. The DNS
                        <code>A</code> record can be added under the following conditions:</para>
            </formalpara>
            <itemizedlist>
                <listitem>
                    <para>In &R53long;, if the name is suffixed by your private hosted zone
                        name</para>
                </listitem>
                <listitem>
                    <para>Within the application container's <code>/etc/hosts</code> file</para>
                </listitem>
                <listitem>
                    <para>In a third-party DNS server that you manage</para>
                </listitem>
            </itemizedlist>
            <para>If your issue is still not resolved, then consider opening a <ulink
                    url="https://github.com/aws/aws-app-mesh-roadmap/issues/new?assignees=&amp;labels=Bug&amp;template=issue--bug-report.md&amp;title=Bug%3A+describe+bug+here"
                    >GitHub issue</ulink> or contact <ulink type="marketing" url="premiumsupport/"
                    >&AWS; Support</ulink>.</para>
        </section>
        <section id="ts-connectivity-virtual-service-backend">
            <info>
                <title id="ts-connectivity-virtual-service-backend.title">Unable to connect to a
                    virtual service backend</title>
            </info>
            <formalpara>
                <title>Symptoms</title>
                <para>Your application is unable to establish a connection to a virtual service
                    defined as a backend on your virtual node. When attempting to establish a
                    connection, the connection may fail entirely, or the request from the
                    application's perspective may fail with an <code>HTTP 503</code> response
                    code.</para>
            </formalpara>
            <formalpara>
                <title>Resolution</title>
                <para>If the application fails to connect at all (no <code>HTTP 503</code> response
                    code returned), then do the following:</para>
            </formalpara>
            <itemizedlist>
                <listitem>
                    <para>Make sure that your compute environment has been set up to work with
                        &MESH;.</para>
                    <itemizedlist>
                        <listitem>
                            <para>For &ECS;, make sure that you have the appropriate <link
                                    linkend="proxy-authorization">proxy configuration</link>
                                enabled. For an end-to-end walkthrough, see <ulink
                                    type="documentation"
                                    url="AmazonECS/latest/developerguide/appmesh-getting-started.html"
                                    >Getting Started with &MESH; and &ECS;</ulink>.</para>
                        </listitem>
                        <listitem>
                            <para>For Kubernetes, including &EKS;, make sure that you have the
                                latest &MESH; controller installed via Helm. For more information,
                                see <ulink url="https://hub.helm.sh/charts/aws/appmesh-controller"
                                    >&MESH; Controller</ulink> on Helm Hub or <ulink
                                    type="documentation"
                                    url="app-mesh/latest/userguide/mesh-k8s-integration.html"
                                    >Tutorial: Configure &MESH; integration with
                                Kubernetes</ulink>.</para>
                        </listitem>
                        <listitem>
                            <para>For &EC2;, make sure that you have setup your &EC2; instance for
                                proxying &MESH; traffic. For more information, see <ulink
                                    type="documentation"
                                    url="app-mesh/latest/userguide/appmesh-getting-started.html#update-services"
                                    >Update services</ulink>.</para>
                        </listitem>
                    </itemizedlist>
                </listitem>
                <listitem>
                    <para>Make sure that the Envoy container running on your compute service has
                        successfully connected to the &MESH; Envoy management service. For more
                        information, see <xref linkend="ts-setup-grpc-error-codes"
                            endterm="ts-setup-grpc-error-codes.title"/>. If the application connects
                        but the request fails with an <code>HTTP 503</code> response code, try the
                        following:</para>
                    <itemizedlist>
                        <listitem>
                            <para>Make sure that the virtual service you're connecting to exists in
                                the mesh.</para>
                        </listitem>
                        <listitem>
                            <para>Make sure that the virtual service has a provider (a virtual
                                router or virtual node).</para>
                        </listitem>
                        <listitem>
                            <para>Inspect the Envoy proxy logs for any of the following error
                                messages:</para>
                            <itemizedlist>
                                <listitem>
                                    <para><code>No healthy upstream</code> &endash; The virtual node
                                        that the Envoy proxy is attempting to route to does not have
                                        any resolved endpoints, or it does not have any healthy
                                        endpoints. Make sure that the target virtual node has the
                                        correct service discovery and health check settings.</para>
                                    <para>If requests to the service are failing during a deployment
                                        or scaling of the backend virtual service, follow the
                                        guidance in <xref
                                            linkend="ts-connectivity-virtual-node-provider"
                                            endterm="ts-connectivity-virtual-node-provider.title"
                                        />.</para>
                                </listitem>
                                <listitem>
                                    <para><code>No cluster match for URL</code> &endash; This is
                                        most likely caused when a request is sent to a virtual
                                        service that does not match the criteria defined by any of
                                        the routes defined under a virtual router provider. Make
                                        sure that the requests from the application are sent to a
                                        supported route by ensuring the path and HTTP request
                                        headers are correct.</para>
                                </listitem>
                                <listitem>
                                    <para><code>No matching filter chain found</code> &endash; This
                                        is most likely caused when a request is sent to a virtual
                                        service on an invalid port. Make sure that the requests from
                                        the application are using the same port specified on the
                                        virtual router.</para>
                                </listitem>
                            </itemizedlist>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </itemizedlist>
            <para>If your issue is still not resolved, then consider opening a <ulink
                    url="https://github.com/aws/aws-app-mesh-roadmap/issues/new?assignees=&amp;labels=Bug&amp;template=issue--bug-report.md&amp;title=Bug%3A+describe+bug+here"
                    >GitHub issue</ulink> or contact <ulink type="marketing" url="premiumsupport/"
                    >&AWS; Support</ulink>.</para>
        </section>
        <section id="ts-connectivity-external-service">
            <info>
                <title id="ts-connectivity-external-service.title">Unable to connect to an external
                    service</title>
            </info>
            <formalpara>
                <title>Symptoms</title>
                <para>Your application is unable to connect to a service outside of the mesh, such
                    as <code>amazon.com</code>.</para>
            </formalpara>
            <formalpara>
                <title>Resolution</title>
                <para>By default, &MESH; does not allow outbound traffic from applications within
                    the mesh to any destination outside of the mesh. To enable communication with an
                    external service, there are two options:</para>
            </formalpara>
            <itemizedlist>
                <listitem>
                    <para>Set the <ulink type="documentation"
                            url="app-mesh/latest/APIReference/API_EgressFilter.html">outbound
                            filter</ulink> on the mesh resource to <code>ALLOW_ALL</code>. This
                        setting will allow any application within the mesh to communicate with any
                        destination IP address inside or outside of the mesh.</para>
                </listitem>
                <listitem>
                    <para>Model the external service in the mesh using a virtual service, virtual
                        router, route, and virtual node. For example, to model the external service
                            <code>example.com</code>, you can create a virtual service named
                            <code>example.com</code> with a virtual router and route that sends all
                        traffic to a virtual node with a DNS service discovery hostname of
                            <code>example.com</code>.</para>
                </listitem>
            </itemizedlist>
            <para>If your issue is still not resolved, then consider opening a <ulink
                    url="https://github.com/aws/aws-app-mesh-roadmap/issues/new?assignees=&amp;labels=Bug&amp;template=issue--bug-report.md&amp;title=Bug%3A+describe+bug+here"
                    >GitHub issue</ulink> or contact <ulink type="marketing" url="premiumsupport/"
                    >&AWS; Support</ulink>.</para>
        </section>
        <section id="ts-connectivity-troubleshooting-mysql-and-smtp">
            <info>
                <title id="ts-connectivity-troubleshooting-mysql-and-smtp.title">Unable to connect
                    to a MySQL or SMTP server</title>
            </info>
            <formalpara>
                <title>Symptoms</title>
                <para>When allowing outbound traffic to all destinations (Mesh <code>EgressFilter
                        type</code>=<code>ALLOW_ALL</code>), such as an SMTP server or a MySQL
                    database using a virtual node definition, the connection from your application
                    fails. As an example, the following is an error message from attempting to
                    connect to a MySQL server.</para>
            </formalpara>
            <programlisting role="nocopy">ERROR 2013 (HY000): Lost connection to MySQL server at 'reading initial communication packet', system error: 0</programlisting>
            <formalpara>
                <title>Resolution</title>
                <para>This is a known issue that is resolved by using App Mesh image version 1.15.0
                    or later. For more information, see the <ulink
                        url="https://github.com/aws/aws-app-mesh-roadmap/issues/62">Unable to
                        connect to MySQL with App Mesh</ulink> GitHub issue. This error occurs
                    because the outbound listener in Envoy configured by &MESH; adds the Envoy TLS
                    Inspector listener filter. For more information, see <ulink
                        url="https://www.envoyproxy.io/docs/envoy/latest/configuration/listeners/listener_filters/tls_inspector#config-listener-filters-tls-inspector"
                        >TLS Inspector</ulink> in the Envoy documentation. This filter evaluates
                    whether or not a connection is using TLS by inspecting the first packet sent
                    from the client. With MySQL and SMTP, however, the server sends the first packet
                    after connection. For more information about MySQL, see <ulink
                        url="https://dev.mysql.com/doc/internals/en/initial-handshake.html">Initial
                        Handshake</ulink> in the MySQL documentation. Because the server sends the
                    first packet, inspection at the filter fails.</para>
            </formalpara>
            <para>To work around this issue, either upgrade your Envoy version to AppMesh image
                1.15.0 (or later version), or use the following instructions: add port
                    <code>3306</code> to the list of values for the
                    <code>APPMESH_EGRESS_IGNORED_PORTS</code> in your services for MySQL, and the
                port you are using for STMP.</para>
            <important>
                <para>While the standard SMTP ports are <code>25</code>, <code>587</code>, and
                        <code>465</code>, you should only add the port you are using to
                        <code>APPMESH_EGRESS_IGNORED_PORTS</code> and not all three.</para>
            </important>
            <para>For more information, see <ulink type="documentation"
                    url="eks/latest/userguide/appmesh-getting-started.html#update-services">Update
                    services</ulink> for Kubernetes , <ulink type="documentation"
                    url="AmazonECS/latest/developerguide/appmesh-getting-started.html#update-services"
                    >Update services</ulink> for &ECS;, or <ulink type="documentation"
                    url="app-mesh/latest/userguide/appmesh-getting-started.html#update-services"
                    >Update services</ulink> for &EC2;. </para>
            <para>If your issue is still not resolved, then you can provide us with details on what
                you're experiencing using the existing <ulink
                    url="https://github.com/aws/aws-app-mesh-roadmap/issues/62">GitHub issue</ulink>
                or contact <ulink type="marketing" url="premiumsupport/">&AWS;
                Support</ulink>.</para>
        </section>
        <section id="ts-connectivity-virtual-node-router">
            <info>
                <title id="ts-connectivity-virtual-node-router.title">Unable to connect to a service
                    modeled as a TCP virtual node or virtual router in &MESH;</title>
            </info>
            <formalpara>
                <title>Symptoms</title>
                <para>Your application is unable to connect to a backend that uses the TCP protocol
                    setting in the &MESH; <ulink type="documentation"
                        url="app-mesh/latest/APIReference/API_PortMapping.html">PortMapping</ulink>
                    definition.</para>
            </formalpara>
            <formalpara>
                <title>Resolution</title>
                <para>This is a known issue. For more information, see <ulink
                        url="https://github.com/aws/aws-app-mesh-roadmap/issues/195">Routing to
                        multiple TCP destinations on the same port</ulink> on GitHub. &MESH; does
                    not currently allow multiple backend destinations modeled as TCP to share the
                    same port due to restrictions in the information provided to the Envoy proxy at
                    OSI Layer 4. To make sure that TCP traffic can be routed appropriately for all
                    backend destinations, do the following: </para>
            </formalpara>
            <itemizedlist>
                <listitem>
                    <para>Make sure that all destinations are using a unique port. If you are using
                        a virtual router provider for the backend virtual service, you can change
                        the virtual router port without changing the port on the virtual nodes that
                        it routes to. This allows the applications to open connections on the
                        virtual router port while the Envoy proxy continues to use the port defined
                        in the virtual node.</para>
                </listitem>
                <listitem>
                    <para>If the destination modeled as TCP is a MySQL server, or any other
                        TCP-based protocol in which the server sends the first packets after
                        connection, see <xref
                            linkend="ts-connectivity-troubleshooting-mysql-and-smtp"
                            endterm="ts-connectivity-troubleshooting-mysql-and-smtp.title"/>.</para>
                </listitem>
            </itemizedlist>
            <para>If your issue is still not resolved, then you can provide us with details on what
                you're experiencing using the existing <ulink
                    url="https://github.com/aws/aws-app-mesh-roadmap/issues/195">GitHub
                    issue</ulink> or contact <ulink type="marketing" url="premiumsupport/">&AWS;
                    Support</ulink>.</para>
        </section>
        <section id="ts-connectivity-not-virtual-service">
            <info>
                <title id="ts-connectivity-not-virtual-service.title">Connectivity succeeds to
                    service not listed as a virtual service backend for a virtual node</title>
            </info>
            <formalpara>
                <title>Symptoms</title>
                <para>Your application is able to connect and send traffic to a destination that is
                    not specified as a virtual service backend on your virtual node.</para>
            </formalpara>
            <formalpara>
                <title>Resolution</title>
                <para>If requests are succeeding to a destination that has not been modeled in the
                    &MESH; APIs, then the most likely cause is that the mesh's <ulink
                        type="documentation"
                        url="app-mesh/latest/APIReference/API_EgressFilter.html">outbound
                        filter</ulink> type has been set to <code>ALLOW_ALL</code>. When the
                    outbound filter is set to <code>ALLOW_ALL</code>, an outbound request from your
                    application that does not match a modeled destination (backend) will be sent to
                    the destination IP address set by the application. </para>
            </formalpara>
            <para>If you want to disallow traffic to destinations not modeled in the mesh, consider
                setting the outbound filter value to <code>DROP_ALL</code>.</para>
            <note>
                <para>Setting the mesh outbound filter value affects all virtual nodes within the
                    mesh.</para>
            </note>
            <para>If your issue is still not resolved, then consider opening a <ulink
                    url="https://github.com/aws/aws-app-mesh-roadmap/issues/new?assignees=&amp;labels=Bug&amp;template=issue--bug-report.md&amp;title=Bug%3A+describe+bug+here"
                    >GitHub issue</ulink> or contact <ulink type="marketing" url="premiumsupport/"
                    >&AWS; Support</ulink>.</para>
        </section>
        <section id="ts-connectivity-virtual-node-provider">
            <info>
                <title id="ts-connectivity-virtual-node-provider.title">Some requests fail with HTTP
                    status code <code>503</code> when a virtual service has a virtual node
                    provider</title>
            </info>
            <formalpara>
                <title>Symptoms</title>
                <para>A portion of your application's requests fail to a virtual service backend
                    that is using a virtual node provider instead of a virtual router provider. When
                    using a virtual router provider for the virtual service, requests do not
                    fail.</para>
            </formalpara>
            <formalpara>
                <title>Resolution</title>
                <para>This is a known issue. For more information, see <ulink
                        url="https://github.com/aws/aws-app-mesh-roadmap/issues/194">Retry policy on
                        Virtual Node provider for a Virtual Service</ulink> on GitHub. When using a
                    virtual node as a provider for a virtual service, you cannot specify the default
                    retry policy that you want the clients of your virtual service to use. By
                    comparison, virtual router providers allow retry policies to be specified
                    because they are a property of the child route resources.</para>
            </formalpara>
            <para>To reduce request failures to virtual node providers, use a virtual router
                provider instead, and specify a retry policy on its routes. For other ways to reduce
                request failures to your applications, see <link linkend="best-practices"
                    endterm="best-practices.title"/>. </para>
            <para>If your issue is still not resolved, then consider opening a <ulink
                    url="https://github.com/aws/aws-app-mesh-roadmap/issues/new?assignees=&amp;labels=Bug&amp;template=issue--bug-report.md&amp;title=Bug%3A+describe+bug+here"
                    >GitHub issue</ulink> or contact <ulink type="marketing" url="premiumsupport/"
                    >&AWS; Support</ulink>.</para>
        </section>
        <!-- <section id="ts-connectivity-upstream-connect-failures">
            <info>
                <title id="ts-connectivity-upstream-connect-failures.title">HTTP 503 &endash;
                    Upstream connect or disconnects or resets before headers errors</title>
            </info>
            <formalpara>
                <title>Symptoms</title>
                <para>When you configure resiliency mechanisms like retry strategies and health
                    checks, those are distributed down to the source Envoy. The destination Envoy
                    routing traffic to your application is not configured with the same set of
                    rules, as consistent behavior when routing on localhost is generally expected.
                    When your application hits its idle timeout for a connection however, it will
                    attempt to close its connection with the Envoy. When there is a race between
                    Envoy sending a request on a connection and the application closing it, Envoy
                    will emit a metric called <code>upstream_cx_destroy_remote_with_active_rq</code>
                    and will return a <code>503</code> to the <code>downstream</code> application.
                    For example, a misconfigured virtual node named <code>virtual-node-a</code> in a
                    mesh named <code>prod</code>, would have metrics similar to the following
                    example.</para>
            </formalpara>
            <programlisting role="nocopy">cluster.cds_ingress_prod_virtual-node-a_http_3000.upstream_cx_destroy_local: 0
cluster.cds_ingress_prod_virtual-node-a_http_3000.upstream_cx_destroy_local_with_active_rq: 0
cluster.cds_ingress_prod_virtual-node-a_http_3000.upstream_cx_destroy_remote: 12
cluster.cds_ingress_prod_virtual-node-a_http_3000.upstream_cx_destroy_remote_with_active_rq: 10
cluster.cds_ingress_prod_virtual-node-a_http_3000.upstream_cx_destroy_with_active_rq: 10</programlisting>
            <formalpara>
                <title>Resolution</title>

                <para>Because Envoy is managing inbound connections on your application’s behalf and
                    ensuring that the appropriate number of connections are made to your
                    application, we recommend configuring your application to have a reasonably high
                    idle timeout of 5 minutes. This ensures that connections from the destination
                    Envoy to your application are only terminated by Envoy, and that your clients
                    don’t perceive intermittent connection timeouts as failures. To adjust idle
                    timeouts using different languages, select one of the following links.</para>
            </formalpara>
            <itemizedlist>
                <listitem>
                    <para>To adjust idle timeouts in Node.JS, adjust your server’s <ulink
                            url="https://nodejs.org/api/http.html#http_server_keepalivetimeout"
                            >keepAliveTimeout</ulink></para>
                </listitem>
                <listitem>
                    <para>To adjust idle timeouts in DropWizard, adjust your <ulink
                            url="https://www.dropwizard.io/en/latest/manual/configuration.html">HTTP
                            idleTimeout</ulink></para>
                </listitem>
                <listitem>
                    <para>To adjust idle timeouts in Rails, use <ulink
                            url="https://github.com/ankane/the-ultimate-guide-to-ruby-timeouts#rack-middleware"
                            >Rack middleware</ulink></para>
                </listitem>
                <listitem>
                    <para>To adjust idle timeouts in Tomcat, use <ulink
                            url="http://tomcat.apache.org/tomcat-7.0-doc/config/http.html"
                            >connectionTimeout or keepAliveTimeout</ulink></para>
                </listitem>
            </itemizedlist>
            <para>If your issue is still not resolved, then consider opening a <ulink
                    url="https://github.com/aws/aws-app-mesh-roadmap/issues/new?assignees=&amp;labels=Bug&amp;template=issue-bug-report.md&amp;title=Bug%3A+describe+bug+here"
                    >GitHub issue</ulink> or contact <ulink type="marketing" url="premiumsupport/"
                    >&AWS; Support</ulink>.</para>
        </section> -->
        <section id="ts-connectivity-efs">
            <info>
                <title id="ts-connectivity-efs.title">Unable to connect to an &EFS;
                    filesystem</title>
            </info>
            <formalpara>
                <title>Symptoms</title>
                <para>When configuring an &ECS; task with an &EFS; filesystem as a volume, the task
                    fails to start with the following error.</para>
            </formalpara>
            <programlisting role="nocopy">ResourceInitializationError: failed to invoke EFS utils commands to set up EFS volumes: stderr: mount.nfs4: Connection refused : unsuccessful EFS utils command execution; code: 32</programlisting>
            <formalpara>
                <title>Resolution</title>
                <para>This is a known issue. This error occurs because the NFS connection to &EFS;
                    occurs before any containers in your task are started. This traffic is routed by
                    the proxy configuration to Envoy, which will not be running at this point.
                    Because of the ordering of startup, the NFS client fails to connecting to the
                    &EFS; filesystem and the task fails to launch. To resolve the issue, add port
                        <code>2049</code> to the list of values for the
                        <code>EgressIgnoredPorts</code> setting in the proxy configuration of your
                    &ECS; task definition. For more information, see <ulink type="documentation"
                        url="AmazonECS/latest/developerguide/task_definition_parameters.html#proxyConfiguration"
                        >Proxy configuration</ulink>.</para>
            </formalpara>
            <para>If your issue is still not resolved, then consider opening a <ulink
                    url="https://github.com/aws/aws-app-mesh-roadmap/issues/new?assignees=&amp;labels=Bug&amp;template=issue--bug-report.md&amp;title=Bug%3A+describe+bug+here"
                    >GitHub issue</ulink> or contact <ulink type="marketing" url="premiumsupport/"
                    >&AWS; Support</ulink>.</para>
        </section>
        <section id="ts-connectivity-iptables">
            <info>
                <title id="ts-connectivity-iptables.title">Connectivity succeeds to service, but the
                    incoming request does not appear in access logs, traces, or metrics for
                    Envoy</title>
            </info>
            <formalpara>
                <title>Symptoms</title>
                <para> Even though your application can connect and send requests to another
                    application, you either can not see incoming requests in the access logs or in
                    tracing information for the Envoy proxy.</para>
            </formalpara>
            <formalpara>
                <title>Resolution</title>
                <para>This is a known issue. From more information, see <ulink
                        url="https://github.com/aws/aws-app-mesh-roadmap/issues/166">iptables rules
                        setup</ulink> issue on Github. The Envoy proxy only intercepts inbound
                    traffic to the port of which its corresponding virtual node is listening on.
                    Requests to any other port will bypass the Envoy proxy and reach to the service
                    behind it directly. In order to let the Envoy proxy intercept the inbound
                    traffic for your service you need to set your virtual node and service to listen
                    on the same port.</para>
            </formalpara>
            <para>If your issue is still not resolved, then consider opening a <ulink
                    url="https://github.com/aws/aws-app-mesh-roadmap/issues/new?assignees=&amp;labels=Bug&amp;template=issue--bug-report.md&amp;title=Bug%3A+describe+bug+here"
                    >GitHub issue</ulink> or contact <ulink type="marketing" url="premiumsupport/"
                    >&AWS; Support</ulink>.</para>
        </section>
    </section>
    <section id="troubleshooting-scaling" role="topic">
        <info>
            <title id="troubleshooting-scaling.title">&MESH; scaling troubleshooting</title>
            <titleabbrev>Scaling</titleabbrev>
        </info>
        <para>This topic details common issues that you may experience with &MESH; scaling.</para>
        <section id="ts-scaling-exceed-virtual-node-envoy-quota">
            <info>
                <title id="ts-scaling-exceed-virtual-node-envoy-quota.title">Connectivity fails and
                    container health checks fail when scaling beyond 50 replicas for a virtual
                    node/virtual gateway</title>
            </info>
            <formalpara>
                <title>Symptoms</title>
                <para>When you are scaling the number of replicas, such as &ECS; tasks, Kubernetes
                    pods, or &EC2; instances, for a virtual node/virtual gateway beyond 50, Envoy
                    container health checks for new and currently running Envoys begin to fail.
                    Downstream applications sending traffic to the virtual node/virtual gateway
                    begin seeing request failures with HTTP status code <code>503</code>.</para>
            </formalpara>
            <formalpara>
                <title>Resolution</title>
                <para>&MESH;'s default quota for the number of Envoys per virtual node/virtual
                    gateway is 50. When the number of running Envoys exceeds this quota, new and
                    currently running Envoys fail to connect to &MESH;'s Envoy management service
                    with gRPC status code <code>8</code> (<code>RESOURCE_EXHAUSTED</code>). This
                    quota can be raised. For more information, see <link linkend="service-quotas"
                        endterm="service-quotas.title"/>.</para>
            </formalpara>
            <para>If your issue is still not resolved, then consider opening a <ulink
                    url="https://github.com/aws/aws-app-mesh-roadmap/issues/new?assignees=&amp;labels=Bug&amp;template=issue--bug-report.md&amp;title=Bug%3A+describe+bug+here"
                    >GitHub issue</ulink> or contact <ulink type="marketing" url="premiumsupport/"
                    >&AWS; Support</ulink>.</para>
        </section>
        <section id="ts-scaling-out-in">
            <info>
                <title id="ts-scaling-out-in.title">Requests fail with <code>503</code> when a
                    virtual service backend horizontally scales out or in</title>
            </info>
            <formalpara>
                <title>Symptoms</title>
                <para>When a backend virtual service is horizontally scaled out or in, requests from
                    downstream applications fail with an <code>HTTP 503</code> status code.</para>
            </formalpara>
            <formalpara>
                <title>Resolution</title>
                <para>&MESH; recommends several approaches to mitigate failure cases while scaling
                    applications horizontally. For detailed information about how to prevent these
                    failures, see <link linkend="best-practices" endterm="best-practices.title"
                    />.</para>
            </formalpara>
            <para>If your issue is still not resolved, then consider opening a <ulink
                    url="https://github.com/aws/aws-app-mesh-roadmap/issues/new?assignees=&amp;labels=Bug&amp;template=issue--bug-report.md&amp;title=Bug%3A+describe+bug+here"
                    >GitHub issue</ulink> or contact <ulink type="marketing" url="premiumsupport/"
                    >&AWS; Support</ulink>.</para>
        </section>
        <section id="ts-scaling-segfault">
            <info>
                <title id="ts-scaling-segfault.title">Envoy container crashes with segfault under
                    increased load</title>
            </info>
            <formalpara>
                <title>Symptoms</title>
                <para>Under a high traffic load, the Envoy proxy crashes due to a segmentation fault
                    (Linux exit code <code>139</code>). The Envoy process logs contain a statement
                    like the following.</para>
            </formalpara>
            <programlisting role="nocopy">Caught Segmentation fault, suspect faulting address 0x0"</programlisting>
            <formalpara>
                <title>Resolution</title>
                <para>The Envoy proxy has likely breached the operating system's default nofile
                    ulimit, the limit on the number of files a process can have open at a time. This
                    breach is due to the traffic causing more connections, which consume additional
                    operating system sockets. To resolve this issue, increase the ulimit nofile
                    value on the host operating system. If you are using &ECS;, this limit can be
                    changed through the <ulink type="documentation"
                        url="AmazonECS/latest/APIReference/API_Ulimit.html">Ulimit settings</ulink>
                    on the task definition's <ulink type="documentation"
                        url="AmazonECS/latest/developerguide/task_definition_parameters.html#container_definition_limits"
                        >resource limits settings</ulink>.</para>
            </formalpara>
            <para>If your issue is still not resolved, then consider opening a <ulink
                    url="https://github.com/aws/aws-app-mesh-roadmap/issues/new?assignees=&amp;labels=Bug&amp;template=issue--bug-report.md&amp;title=Bug%3A+describe+bug+here"
                    >GitHub issue</ulink> or contact <ulink type="marketing" url="premiumsupport/"
                    >&AWS; Support</ulink>.</para>
        </section>
        <section id="default-resources-increase">
            <info>
                <title id="default-resources-increase.title">Increase in default resources is not
                    reflected in Service Limits</title>
            </info>
            <formalpara>
                <title>Symptoms</title>
                <para>After increasing the default limit of &MESH; resources, the new value is not
                    reflected when you look at your service limits</para>
            </formalpara>
            <formalpara>
                <title>Resolution</title>
                <para>While the new limits aren't currently shown, customers can still exercise
                    them.</para>
            </formalpara>
            <para>If your issue is still not resolved, then consider opening a <ulink
                    url="https://github.com/aws/aws-app-mesh-roadmap/issues/new?assignees=&amp;labels=Bug&amp;template=issue--bug-report.md&amp;title=Bug%3A+describe+bug+here"
                    >GitHub issue</ulink> or contact <ulink type="marketing" url="premiumsupport/"
                    >&AWS; Support</ulink>.</para>
        </section>
        <section id="default-resources-increase">
            <info>
                <title id="default-resources-increase.title">Increase in default resources is not
                    reflected on in service limits</title>
            </info>
            <formalpara>
                <title>Symptoms</title>
                <para>After increasing the default limit of &MESH; resources, the new value is not
                    reflected when you look at your service limits</para>
            </formalpara>
            <formalpara>
                <title>Resolution</title>
                <para>While the new limits aren't currently shown, customers can still exercise
                    them.</para>
            </formalpara>
            <para>If your issue is still not resolved, then consider opening a <ulink
                    url="https://github.com/aws/aws-app-mesh-roadmap/issues/new?assignees=&amp;labels=Bug&amp;template=issue--bug-report.md&amp;title=Bug%3A+describe+bug+here"
                    >GitHub issue</ulink> or contact <ulink type="marketing" url="premiumsupport/"
                    >&AWS; Support</ulink>.</para>
        </section>
    </section>
    <section id="troubleshoot-observability" role="topic">
        <info>
            <title id="troubleshooting-observability.title">&MESH; observability
                troubleshooting</title>
            <titleabbrev>Observability</titleabbrev>
        </info>
        <para>This topic details common issues that you may experience with &MESH;
            observability.</para>
        <section id="ts-observability-x-ray-traces">
            <info>
                <title id="ts-observability-x-ray-traces.title">Unable to see &xraylong; traces for
                    my applications</title>
            </info>
            <formalpara>
                <title>Symptoms</title>
                <para>Your application in &MESH; is not displaying &xray; tracing information in the
                    &xray; console or APIs.</para>
            </formalpara>
            <formalpara>
                <title>Resolution</title>
                <para>To use &xray; in &MESH;, you must correctly configure components to enable
                    communication between your application, sidecar containers, and the &xray;
                    service. Take the following steps to confirm that &xray; has been set up
                    correctly:</para>
            </formalpara>
            <itemizedlist>
                <listitem>
                    <para>Make sure that the &xray; container that is deployed with your application
                        exposes UDP port <code>2000</code> and runs as user <code>1337</code>. For
                        more information, see the <ulink
                            url="https://github.com/aws/aws-app-mesh-examples/blob/master/walkthroughs/howto-ecs-basics/deploy/2-meshify.yaml#L374-L386"
                            >&ECS; &xray; example</ulink> on GitHub.</para>
                </listitem>
                <listitem>
                    <para>Make sure that the Envoy container has tracing enabled. If you are using
                        the <link linkend="envoy">&MESH; Envoy image</link>, you can enable &xray;
                        by setting the <code>ENABLE_ENVOY_XRAY_TRACING</code> environment variable
                        to a value of <code>1</code> and the <code>XRAY_DAEMON_PORT</code>
                        environment variable to <code>2000</code>.</para>
                </listitem>
                <listitem>
                    <para>If you’ve instrumented &xray; in your application code with one of the
                            <ulink type="documentation" url="xray/index.html">language-specific SDKs
                        </ulink>, then make sure that it is configured correctly by following the
                        guides for your language.</para>
                </listitem>
                <listitem>
                    <para>If all of the previous items are configured correctly, then review the
                        &xray; container logs for errors and follow the guidance in <ulink
                            type="documentation"
                            url="xray/latest/devguide/xray-troubleshooting.html">Troubleshooting
                            &xraylong;</ulink>. A more detailed explanation of &xray; integration in
                        &MESH; can be found in <ulink type="blog"
                            url="compute/integrating-aws-x-ray-with-aws-app-mesh/">Integrating
                            &xray; with &MESH;</ulink>.</para>
                </listitem>
            </itemizedlist>
            <para>If your issue is still not resolved, then consider opening a <ulink
                    url="https://github.com/aws/aws-app-mesh-roadmap/issues/new?assignees=&amp;labels=Bug&amp;template=issue--bug-report.md&amp;title=Bug%3A+describe+bug+here"
                    >GitHub issue</ulink> or contact <ulink type="marketing" url="premiumsupport/"
                    >&AWS; Support</ulink>.</para>
        </section>
        <section id="ts-observability-envoy-metrics">
            <info>
                <title id="ts-observability-envoy-metrics.title">Unable to see Envoy metrics for my
                    applications in &CWlong; metrics</title>
            </info>
            <formalpara>
                <title>Symptoms</title>
                <para>Your application in &MESH; is not emitting metrics generated by the Envoy
                    proxy to &CW; metrics.</para>
            </formalpara>
            <formalpara>
                <title>Resolution</title>
                <para>When you use &CW; metrics in &MESH;, you must correctly configure several
                    components to enable communication between your Envoy proxy, &CW; agent sidecar,
                    and the &CW; metrics service. Take the following steps to confirm that &CW;
                    metrics for Envoy proxy have been setup correctly:</para>
            </formalpara>
            <itemizedlist>
                <listitem>
                    <para>Make sure that you are using the &CW; agent image for &MESH;. For more
                        information, see <ulink
                            url="https://github.com/aws-samples/aws-app-mesh-cloudwatch-agent"
                            >&MESH; &CW; agent</ulink> on GitHub.</para>
                </listitem>
                <listitem>
                    <para>Make sure that you have configured the &CW; agent for &MESH; appropriately
                        by following the platform-specific usage instructions. For more information,
                        see <ulink
                            url="https://github.com/aws-samples/aws-app-mesh-cloudwatch-agent#usage"
                            >&MESH; &CW; agent</ulink> on GitHub.</para>
                </listitem>
                <listitem>
                    <para>If all of the previous items are configured correctly, then review the
                        &CW; agent container logs for errors and follow the guidance provided in
                            <ulink type="documentation"
                            url="AmazonCloudWatch/latest/monitoring/troubleshooting-CloudWatch-Agent.html"
                            >Troubleshooting the &CW; agent</ulink>.</para>
                </listitem>
            </itemizedlist>
            <para>If your issue is still not resolved, then consider opening a <ulink
                    url="https://github.com/aws/aws-app-mesh-roadmap/issues/new?assignees=&amp;labels=Bug&amp;template=issue--bug-report.md&amp;title=Bug%3A+describe+bug+here"
                    >GitHub issue</ulink> or contact <ulink type="marketing" url="premiumsupport/"
                    >&AWS; Support</ulink>.</para>
        </section>
        <section id="ts-observability-custom-sampling">
            <info>
                <title id="ts-observability-custom-sampling.title">Unable to configure custom
                    sampling rules for &xraylong; traces</title>
            </info>
            <formalpara>
                <title>Symptoms</title>
                <para>Your application is using &xray; tracing, but you are unable to configure
                    sampling rules for your traces.</para>
            </formalpara>
            <formalpara>
                <title>Resolution</title>
                <para>This is a known issue. For more information, see the <ulink
                        url="https://github.com/aws/aws-app-mesh-roadmap/issues/95">Support Dynamic
                        &xray; sampling configuration</ulink> issue on GitHub. The Envoy proxy
                    allows configuration of sampling rules through static configuration. For more
                    information, see <ulink
                        url="https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/trace/v3/xray.proto.html?highlight=tracing"
                        >&xraylong; Tracer configuration</ulink> in the Envoy documentation. The
                    Envoy proxy cannot currently be configured to dynamically configure sampling
                    rules through the &MESH; service APIs. </para>
            </formalpara>
            <para>If your issue is still not resolved, then consider opening a <ulink
                    url="https://github.com/aws/aws-app-mesh-roadmap/issues/new?assignees=&amp;labels=Bug&amp;template=issue--bug-report.md&amp;title=Bug%3A+describe+bug+here"
                    >GitHub issue</ulink> or contact <ulink type="marketing" url="premiumsupport/"
                    >&AWS; Support</ulink>.</para>
        </section>
    </section>
    <section id="troubleshooting-security" role="topic">
        <info>
            <title id="troubleshooting-security.title">&MESH; security troubleshooting</title>
            <titleabbrev>Security</titleabbrev>
        </info>
        <para>This topic details common issues that you may experience with &MESH; security.</para>
        <section id="ts-security-tls-client-policy">
            <info>
                <title id="ts-security-tls-client-policy.title">Unable to connect to a backend
                    virtual service with a TLS client policy</title>
            </info>
            <formalpara>
                <title>Symptoms</title>
                <para>When adding a TLS client policy to a virtual service backend in a virtual
                    node, connectivity to that backend fails. When attempting to send traffic to the
                    backend service, the requests fail with an <code>HTTP 503</code> response code
                    and the error message: <code>upstream connect error or disconnect/reset before
                        headers. reset reason: connection failure</code>.</para>
            </formalpara>
            <formalpara>
                <title>Resolution</title>
                <para>In order to determine the root cause of the issue, we recommend using the
                    Envoy proxy process logs to help you diagnose the issue. For more information,
                    see <xref linkend="ts-bp-enable-envoy-debug-logging"
                        endterm="ts-bp-enable-envoy-debug-logging.title"/>. Use the following list
                    to determine the cause of the connection failure:</para>
            </formalpara>
            <itemizedlist>
                <listitem>
                    <para>Make sure connectivity to the backend is succeeding by ruling out the
                        errors mentioned in <xref linkend="ts-connectivity-virtual-service-backend"
                            endterm="ts-connectivity-virtual-service-backend.title"/>.</para>
                </listitem>
                <listitem>
                    <para>In the Envoy process logs, look for the following errors (logged at debug
                        level).</para>
                    <programlisting>TLS error: 268435581:SSL routines:OPENSSL_internal:CERTIFICATE_VERIFY_FAILED</programlisting>
                    <para>This error is caused by one or more of the following reasons:</para>
                    <itemizedlist>
                        <listitem>
                            <para>The certificate was not signed by one of the certificate
                                authorities defined in the TLS client policy trust bundle.</para>
                        </listitem>
                        <listitem>
                            <para>The certificate is no longer valid (expired).</para>
                        </listitem>
                        <listitem>
                            <para>The Subject Alternative Name (SAN) does not match the requested
                                DNS hostname.</para>
                        </listitem>
                        <listitem>
                            <para>Make sure that the certificate offered by the backend service is
                                valid, that it is signed by one of the certificate authorities in
                                your TLS client policies trust bundle, and that it meets the
                                criteria defined in <link linkend="tls" endterm="tls.title"
                                />.</para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </itemizedlist>
            <para>If your issue is still not resolved, then consider opening a <ulink
                    url="https://github.com/aws/aws-app-mesh-roadmap/issues/new?assignees=&amp;labels=Bug&amp;template=issue-bug-report.md&amp;title=Bug%3A+describe+bug+here"
                    >GitHub issue</ulink> or contact <ulink type="marketing" url="premiumsupport/"
                    >&AWS; Support</ulink>. If you believe that you’ve found a security
                vulnerability or have questions about &MESH;’s security, then see the <ulink
                    type="marketing" url="security/vulnerability-reporting/">&AWS; vulnerability
                    reporting guidelines</ulink>.</para>
        </section>
        <section id="ts-security-originating-tls">
            <info>
                <title id="ts-security-originating-tls.title">Unable to connect to a backend virtual
                    service when application is originating TLS</title>
            </info>
            <formalpara>
                <title>Symptoms</title>
                <para>When originating a TLS session from an application, instead of from the Envoy
                    proxy, connectivity to a backend virtual service fails.</para>
            </formalpara>
            <formalpara>
                <title>Resolution</title>
                <para>This is a known issue. For more information, see the <ulink
                        url="https://github.com/aws/aws-app-mesh-roadmap/issues/162">Feature
                        Request: TLS negotiation between the downstream application and upstream
                        proxy</ulink> GitHub issue. In &MESH;, TLS origination is currently
                    supported from the Envoy proxy but not from the application. To use TLS
                    origination support at the Envoy, disable TLS origination in the application.
                    This allows the Envoy to read the outbound request headers and forward the
                    request to the appropriate destination through a TLS session. For more
                    information, see <link linkend="tls" endterm="tls.title"/>. </para>
            </formalpara>
            <para>If your issue is still not resolved, then consider opening a <ulink
                    url="https://github.com/aws/aws-app-mesh-roadmap/issues/new?assignees=&amp;labels=Bug&amp;template=issue--bug-report.md&amp;title=Bug%3A+describe+bug+here"
                    >GitHub issue</ulink> or contact <ulink type="marketing" url="premiumsupport/"
                    >&AWS; Support</ulink>. If you believe that you’ve found a security
                vulnerability or have questions about &MESH;’s security, then see the <ulink
                    type="marketing" url="security/vulnerability-reporting/">&AWS; vulnerability
                    reporting guidelines</ulink>.</para>
        </section>
        <section id="ts-security-tls-between-proxies">
            <info>
                <title id="ts-security-tls-between-proxies.title">Unable to assert that connectivity
                    between Envoy proxies is using TLS</title>
            </info>
            <formalpara>
                <title>Symptoms</title>
                <para>Your application has enabled TLS termination on the virtual node or virtual
                    gateway listener, or TLS origination on the backend TLS client policy, but you
                    are unable to assert that connectivity between Envoy proxies is occurring over a
                    TLS-negotiated session.</para>
            </formalpara>
            <formalpara>
                <title>Resolution</title>
                <para>Steps defined in this resolution make use of the Envoy administration
                    interface and Envoy statistics. For help configuring these, see <xref
                        linkend="ts-bp-enable-proxy-admin-interface"
                        endterm="ts-bp-enable-proxy-admin-interface.title"/> and <xref
                        linkend="ts-bp-enable-envoy-statsd-integration"
                        endterm="ts-bp-enable-envoy-statsd-integration.title"/>. The following
                    statistics examples use the administration interface for simplicity.</para>
            </formalpara>
            <itemizedlist>
                <listitem>
                    <para>For the Envoy proxy performing TLS termination:</para>
                    <itemizedlist>
                        <listitem>
                            <para>Make sure that the TLS certificate has been bootstrapped in the
                                Envoy configuration with the following command.</para>
                            <programlisting><userinput>curl http://my-app.default.svc.cluster.local:9901/certs</userinput></programlisting>
                            <para>In the returned output, you should see at least one entry under
                                    <code>certificates[].cert_chain</code> for the certificate used
                                in TLS termination.</para>
                        </listitem>
                        <listitem>
                            <para>Make sure that the number of successful inbound connections to the
                                proxy’s listener is exactly the same as the number of SSL handshakes
                                plus the number of SSL sessions re-used, as shown by the following
                                example commands and output.</para>
                            <programlisting><userinput>curl -s http://<replaceable>my-app.default.svc.cluster.local</replaceable>:<replaceable>9901</replaceable>/stats | grep "listener.0.0.0.0_15000" | grep downstream_cx_total</userinput>
listener.0.0.0.0_15000.downstream_cx_total: 11
<userinput>curl -s http://<replaceable>my-app.default.svc.cluster.local</replaceable>:<replaceable>9901</replaceable>/stats | grep "listener.0.0.0.0_15000" | grep ssl.connection_error
</userinput>listener.0.0.0.0_15000.ssl.connection_error: 1
<userinput>curl -s http://<replaceable>my-app.default.svc.cluster.local</replaceable>:<replaceable>9901</replaceable>/stats | grep "listener.0.0.0.0_15000" | grep ssl.handshake</userinput>
listener.0.0.0.0_15000.ssl.handshake: 9
<userinput>curl -s http://<replaceable>my-app.default.svc.cluster.local</replaceable>:<replaceable>9901</replaceable>/stats | grep "listener.0.0.0.0_15000" | grep ssl.session_reused</userinput>
listener.0.0.0.0_15000.ssl.session_reused: 1
# Total CX (11) - SSL Connection Errors (1) == SSL Handshakes (9) + SSL Sessions Re-used (1)</programlisting>
                        </listitem>
                    </itemizedlist>
                </listitem>
                <listitem>
                    <para>For the Envoy proxy performing TLS origination:</para>
                    <itemizedlist>
                        <listitem>
                            <para>Make sure that the TLS trust store has been bootstrapped in the
                                Envoy configuration with the following command.</para>
                            <programlisting><userinput>curl http://my-app.default.svc.cluster.local:9901/certs</userinput></programlisting>
                            <para>You should see at least one entry under
                                    <code>certificates[].ca_certs</code> for the certificates used
                                in validating the backend’s certificate during TLS
                                origination.</para>
                        </listitem>
                        <listitem>
                            <para>Make sure that the number of successful outbound connections to
                                the backend cluster is exactly the same as the number of SSL
                                handshakes plus the number of SSL sessions re-used, as shown by the
                                following example commands and output.</para>
                            <programlisting><userinput>curl -s http://<replaceable>my-app.default.svc.cluster.local</replaceable>:<replaceable>9901</replaceable>/stats | grep "<replaceable>virtual-node-name</replaceable>" | grep upstream_cx_total</userinput>
cluster.cds_egress_<replaceable>mesh-name</replaceable>_<replaceable>virtual-node-name</replaceable>_<replaceable>protocol</replaceable>_<replaceable>port</replaceable>.upstream_cx_total: 11
<userinput>curl -s http://<replaceable>my-app.default.svc.cluster.local</replaceable>:<replaceable>9901</replaceable>/stats | grep "<replaceable>virtual-node-name</replaceable>" | grep ssl.connection_error</userinput>
cluster.cds_egress_<replaceable>mesh-name</replaceable>_<replaceable>virtual-node-name</replaceable>_<replaceable>protocol</replaceable>_<replaceable>port</replaceable>.ssl.connection_error: 1
<userinput>curl -s http://<replaceable>my-app.default.svc.cluster.local</replaceable>:<replaceable>9901</replaceable>/stats | grep "<replaceable>virtual-node-name</replaceable>" | grep ssl.handshake</userinput>
cluster.cds_egress_<replaceable>mesh-name</replaceable>_<replaceable>virtual-node-name</replaceable>_<replaceable>protocol</replaceable>_<replaceable>port</replaceable>.ssl.handshake: 9
<userinput>curl -s http://<replaceable>my-app.default.svc.cluster.local</replaceable>:<replaceable>9901</replaceable>/stats | grep "<replaceable>virtual-node-name</replaceable>" | grep ssl.session_reused</userinput>
cluster.cds_egress_<replaceable>mesh-name</replaceable>_<replaceable>virtual-node-name</replaceable>_<replaceable>protocol</replaceable>_<replaceable>port</replaceable>.ssl.session_reused: 1
# Total CX (11) - SSL Connection Errors (1) == SSL Handshakes (9) + SSL Sessions Re-used (1)</programlisting>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </itemizedlist>
            <para>If your issue is still not resolved, then consider opening a <ulink
                    url="https://github.com/aws/aws-app-mesh-roadmap/issues/new?assignees=&amp;labels=Bug&amp;template=issue--bug-report.md&amp;title=Bug%3A+describe+bug+here"
                    >GitHub issue</ulink> or contact <ulink type="marketing" url="premiumsupport/"
                    >&AWS; Support</ulink>. If you believe that you’ve found a security
                vulnerability or have questions about &MESH;’s security, then see the <ulink
                    type="marketing" url="security/vulnerability-reporting/">&AWS; vulnerability
                    reporting guidelines</ulink>.</para>
        </section>
        <section id="ts-security-tls-elb">
            <info>
                <title id="ts-security-tls-elb.title">Troubleshooting TLS with Elastic Load
                    Balancing</title>
            </info>
            <formalpara>
                <title>Symptoms</title>
                <para>When attempting to configure an Application Load Balancer or Network Load
                    Balancer to encrypt traffic to a virtual node, connectivity and load balancer
                    health checks can fail.</para>
            </formalpara>
            <formalpara>
                <title>Resolution</title>
                <para>In order to determine the root cause of the issue, you need to check the
                    following:</para>
            </formalpara>
            <itemizedlist>
                <listitem>
                    <para>For the Envoy proxy performing TLS termination, you need to rule out any
                        misconfiguration. Follow the steps provided above in the <xref
                            linkend="ts-security-tls-client-policy"
                            endterm="ts-security-tls-client-policy.title"/>.</para>
                </listitem>
                <listitem>
                    <para>For the load balancer, you need to look at the configuration of the
                            <code>TargetGroup:</code></para>
                    <itemizedlist>
                        <listitem>
                            <para>Make sure that the <code>TargetGroup</code> port matches the
                                virtual node’s defined listener port.</para>
                        </listitem>
                        <listitem>
                            <para>For Application Load Balancers that are originating TLS
                                connections over HTTP to your service, make sure that the
                                    <code>TargetGroup</code> protocol is set to <code>HTTPS</code>.
                                If health checks are being utilized, make sure that
                                    <code>HealthCheckProtocol</code> is set to <code>HTTPS</code>.
                            </para>
                        </listitem>
                        <listitem>
                            <para>For Network Load Balancers that are originating TLS connections
                                over TCP to your service, make sure that the
                                    <code>TargetGroup</code> protocol is set to <code>TLS</code>. If
                                health checks are being utilized, make sure that
                                    <code>HealthCheckProtocol</code> is set to
                                <code>TCP</code>.</para>
                            <note>
                                <para>Any updates to <code>TargetGroup</code> require changing the
                                        <code>TargetGroup</code> name.</para>
                            </note>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </itemizedlist>
            <para>With this configured properly, your load balancer should provide a secure
                connection to your service using the certificate provided to the Envoy proxy.</para>
            <para>If your issue is still not resolved, then consider opening a <ulink
                    url="https://github.com/aws/aws-app-mesh-roadmap/issues/new?assignees=&amp;labels=Bug&amp;template=issue--bug-report.md&amp;title=Bug%3A+describe+bug+here"
                    >GitHub issue</ulink> or contact <ulink type="marketing" url="premiumsupport/"
                    >&AWS; Support</ulink>. If you believe that you’ve found a security
                vulnerability or have questions about &MESH;’s security, then see the <ulink
                    type="marketing" url="security/vulnerability-reporting/">&AWS; vulnerability
                    reporting guidelines</ulink>.</para>
        </section>
    </section>
    <section id="troubleshooting-kubernetes" role="topic">
        <info>
            <title id="troubleshooting-kubernetes.title">&MESH; Kubernetes troubleshooting</title>
            <titleabbrev>Kubernetes</titleabbrev>
        </info>
        <para>This topic details common issues that you may experience when you use &MESH; with
            Kubernetes.</para>
        <section id="ts-kubernetes-missing-resources">
            <info>
                <title id="ts-kubernetes-missing-resources.title">&MESH; resources created in
                    Kubernetes cannot be found in &MESH;</title>
            </info>
            <formalpara>
                <title>Symptoms</title>
                <para>You have created the &MESH; resources using the Kubernetes custom resource
                    definition (CRD), but the resources that you created are not visible in &MESH;
                    when you use the &console; or APIs.</para>
            </formalpara>
            <formalpara>
                <title>Resolution</title>
                <para>The likely cause is an error in the Kubernetes controller for &MESH;. For more
                    information, see <ulink
                        url="https://github.com/aws/aws-app-mesh-controller-for-k8s/blob/master/docs/guide/troubleshooting.md"
                        >Troubleshooting</ulink> on GitHub. Check the controller logs for any errors
                    or warnings indicating that the controller could not create any resources.
                </para>
            </formalpara>
            <programlisting><userinput>kubectl logs -n appmesh-system -f \
    $(kubectl get pods -n appmesh-system -o name | grep controller)</userinput></programlisting>
            <para>If your issue is still not resolved, then consider opening a <ulink
                    url="https://github.com/aws/aws-app-mesh-roadmap/issues/new?assignees=&amp;labels=Bug&amp;template=issue--bug-report.md&amp;title=Bug%3A+describe+bug+here"
                    >GitHub issue</ulink> or contact <ulink type="marketing" url="premiumsupport/"
                    >&AWS; Support</ulink>.</para>
        </section>
        <section id="ts-kubernetes-pods-after-injection">
            <info>
                <title id="ts-kubernetes-pods-after-injection.title">Pods are failing readiness and
                    liveliness checks after Envoy sidecar is injected</title>
            </info>
            <formalpara>
                <title>Symptoms</title>
                <para>Pods for your application were previously running successfully, but after the
                    Envoy sidecar is injected into a pod, readiness and liveliness checks begin
                    failing.</para>
            </formalpara>
            <formalpara>
                <title>Resolution</title>
                <para>Make sure that the pod has a mesh and virtual node associated with it. Mesh
                    and virtual node settings are set through annotations on the associated
                    deployment object, as in the following example. </para>
            </formalpara>
            <programlisting language="yaml">---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: <replaceable>my-app</replaceable>
  namespace: <replaceable>default</replaceable>
spec:
  replicas: <replaceable>3</replaceable>
  template:
    metadata:
      annotations:
        appmesh.k8s.aws/mesh: <replaceable>my-mesh
</replaceable>        appmesh.k8s.aws/virtualNode:<replaceable>my-virtual-node</replaceable>
...</programlisting>
            <para>Make sure that the Envoy container that was injected into the pod has bootstrapped
                with &MESH;’s Envoy management service. You can verify any errors by referencing the
                error codes in <xref linkend="ts-setup-grpc-error-codes"
                    endterm="ts-setup-grpc-error-codes.title"/>. You can use the following command
                to inspect Envoy logs for the relevant pod.</para>
            <programlisting><userinput>kubectl logs -n appmesh-system -f \
    $(kubectl get pods -n appmesh-system -o name | grep controller) \
    | grep "gRPC config stream closed"</userinput></programlisting>
            <para>If your issue is still not resolved, then consider opening a <ulink
                    url="https://github.com/aws/aws-app-mesh-roadmap/issues/new?assignees=&amp;labels=Bug&amp;template=issue--bug-report.md&amp;title=Bug%3A+describe+bug+here"
                    >GitHub issue</ulink> or contact <ulink type="marketing" url="premiumsupport/"
                    >&AWS; Support</ulink>.</para>
        </section>
        <section id="ts-kubernetes-pods-cmap">
            <info>
                <title id="ts-kubernetes-pods-cmap.title">Pods not registering or deregistering as
                    &CMAP; instances</title>
            </info>
            <formalpara>
                <title>Symptoms</title>
                <para>Your Kubernetes pods are not being registered in or de-registered from &CMAP;
                    as part of their life cycle. A pod may start successfully and be ready to serve
                    traffic, but not receive any. When a pod is terminated, clients may still retain
                    its IP address and attempt to send traffic to it, failing.</para>
            </formalpara>
            <formalpara>
                <title>Resolution</title>
                <para>This is a known issue. For more information, see the <ulink
                        url="https://github.com/aws/aws-app-mesh-controller-for-k8s/issues/159">Pods
                        don't get auto registered/deregistered in Kubernetes with &CMAP;</ulink>
                    GitHub issue. Due to the relationship between pods, &MESH; virtual nodes, and
                    &CMAP; resources, the <ulink
                        url="https://github.com/aws/aws-app-mesh-controller-for-k8s">&MESH;
                        controller for Kubernetes</ulink> may become desynchronized and lose
                    resources. For example, this can happen if a virtual node resource is deleted
                    from Kubernetes before terminating its associated pods. </para>
            </formalpara>
            <para>To mitigate this issue:</para>
            <itemizedlist>
                <listitem>
                    <para>Make sure that you are running the latest version of the &MESH; controller
                        for Kubernetes.</para>
                </listitem>
                <listitem>
                    <para>Make sure that the &CMAP; <code>namespaceName</code> and
                            <code>serviceName</code> are correct in your virtual node
                        definition.</para>
                </listitem>
                <listitem>
                    <para>Make sure that you delete any associated pods prior to deleting your
                        virtual node definition. If you need help identifying which pods are
                        associated with a virtual node, see <xref
                            linkend="ts-kubernetes-where-pod-running"
                            endterm="ts-kubernetes-where-pod-running.title"/>.</para>
                </listitem>
                <listitem>
                    <para>If your issue persists, run the following command to inspect your
                        controller logs for errors that may help reveal the underlying issue.</para>
                    <programlisting><userinput>kubectl logs -n appmesh-system \
    $(kubectl get pods -n appmesh-system -o name | grep appmesh-controller)</userinput></programlisting>
                </listitem>
                <listitem>
                    <para>Consider using the following command to restart your controller pods. This
                        may fix synchronization issues.</para>
                    <programlisting><userinput>kubectl delete -n appmesh-system \
    $(kubectl get pods -n appmesh-system -o name | grep appmesh-controller)</userinput></programlisting>
                </listitem>
            </itemizedlist>
            <para>If your issue is still not resolved, then consider opening a <ulink
                    url="https://github.com/aws/aws-app-mesh-roadmap/issues/new?assignees=&amp;labels=Bug&amp;template=issue--bug-report.md&amp;title=Bug%3A+describe+bug+here"
                    >GitHub issue</ulink> or contact <ulink type="marketing" url="premiumsupport/"
                    >&AWS; Support</ulink>.</para>
        </section>
        <section id="ts-kubernetes-where-pod-running">
            <info>
                <title id="ts-kubernetes-where-pod-running.title">Cannot determine where a pod for
                    an &MESH; resource is running</title>
            </info>
            <formalpara>
                <title>Symptoms</title>
                <para>When you run &MESH; on a Kubernetes cluster, an operator cannot determine
                    where a workload, or pod, is running for a given &MESH; resource.</para>
            </formalpara>
            <formalpara>
                <title>Resolution</title>
                <para>Kubernetes pod resources are annotated with the mesh and virtual node that
                    they are associated to. You can query which pods are running for a given virtual
                    node name with the following command.</para>
            </formalpara>
            <programlisting><userinput>kubectl get pods --all-namespaces -o json | \
    jq '.items[] | { metadata } | select(.metadata.annotations."appmesh.k8s.aws/virtualNode" == "<replaceable>virtual-node-name</replaceable>")'</userinput></programlisting>
            <para>If your issue is still not resolved, then consider opening a <ulink
                    url="https://github.com/aws/aws-app-mesh-roadmap/issues/new?assignees=&amp;labels=Bug&amp;template=issue--bug-report.md&amp;title=Bug%3A+describe+bug+here"
                    >GitHub issue</ulink> or contact <ulink type="marketing" url="premiumsupport/"
                    >&AWS; Support</ulink>.</para>
        </section>
        <section id="ts-kubernetes-pod-running-as">
            <info>
                <title id="ts-kubernetes-pod-running-as.title">Cannot determine what &MESH; resource
                    a pod is running as</title>
            </info>
            <formalpara>
                <title>Symptoms</title>
                <para>When running &MESH; on a Kubernetes cluster, an operator cannot determine what
                    &MESH; resource a given pod is running as.</para>
            </formalpara>
            <formalpara>
                <title>Resolution</title>
                <para>Kubernetes pod resources are annotated with the mesh and virtual node that
                    they are associated to. You can output the mesh and virtual node names by
                    querying the pod directly using the following command.</para>
            </formalpara>
            <programlisting><userinput>kubectl get pod <replaceable>pod-name</replaceable> -n <replaceable>namespace</replaceable> -o json | \
    jq '{ "mesh": .metadata.annotations."appmesh.k8s.aws/mesh", "virtualNode": .metadata.annotations."appmesh.k8s.aws/virtualNode" }'</userinput></programlisting>
            <para>If your issue is still not resolved, then consider opening a <ulink
                    url="https://github.com/aws/aws-app-mesh-roadmap/issues/new?assignees=&amp;labels=Bug&amp;template=issue--bug-report.md&amp;title=Bug%3A+describe+bug+here"
                    >GitHub issue</ulink> or contact <ulink type="marketing" url="premiumsupport/"
                    >&AWS; Support</ulink>.</para>
        </section>
    </section>
</chapter>
